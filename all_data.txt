{'notebook': 'hmwk01.ipynb', 'cell_id': 19, 'lineno': 1, 'end_lineno': 1, 'col_offset': 12, 'end_col_offset': 79, 'type': 'Call1', 'code': 'dfTiDirt.dropna(subset=["Survived", "Pclass", "Age", "Sex"]).copy()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 19, 'lineno': 1, 'end_lineno': 1, 'col_offset': 12, 'end_col_offset': 72, 'type': 'Call1', 'code': 'dfTiDirt.dropna(subset=["Survived", "Pclass", "Age", "Sex"])'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 1, 'end_lineno': 1, 'col_offset': 18, 'end_col_offset': 111, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTiDirt["Survived"] == 1) & (dfTitanic["Pclass"] == 1), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 1, 'end_lineno': 1, 'col_offset': 114, 'end_col_offset': 175, 'type': 'Call1', 'code': 'dfTitanic.loc[dfTitanic["Pclass"] == 1, ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 2, 'end_lineno': 2, 'col_offset': 19, 'end_col_offset': 112, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTiDirt["Survived"] == 1) & (dfTitanic["Pclass"] == 2), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 2, 'end_lineno': 2, 'col_offset': 115, 'end_col_offset': 176, 'type': 'Call1', 'code': 'dfTitanic.loc[dfTitanic["Pclass"] == 2, ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 3, 'end_lineno': 3, 'col_offset': 18, 'end_col_offset': 111, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTiDirt["Survived"] == 1) & (dfTitanic["Pclass"] == 3), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 21, 'lineno': 3, 'end_lineno': 3, 'col_offset': 114, 'end_col_offset': 175, 'type': 'Call1', 'code': 'dfTitanic.loc[dfTitanic["Pclass"] == 3, ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 1, 'end_lineno': 1, 'col_offset': 19, 'end_col_offset': 144, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 1) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 1, 'end_lineno': 1, 'col_offset': 147, 'end_col_offset': 241, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 1) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 2, 'end_lineno': 2, 'col_offset': 19, 'end_col_offset': 146, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 1) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 2, 'end_lineno': 2, 'col_offset': 149, 'end_col_offset': 245, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 1) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 3, 'end_lineno': 3, 'col_offset': 20, 'end_col_offset': 145, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 2) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 3, 'end_lineno': 3, 'col_offset': 148, 'end_col_offset': 242, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 2) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 4, 'end_lineno': 4, 'col_offset': 20, 'end_col_offset': 147, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 2) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 4, 'end_lineno': 4, 'col_offset': 150, 'end_col_offset': 246, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 2) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 5, 'end_lineno': 5, 'col_offset': 19, 'end_col_offset': 144, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 3) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 5, 'end_lineno': 5, 'col_offset': 147, 'end_col_offset': 241, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 3) & (dfTitanic["Sex"] == "male"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 6, 'end_lineno': 6, 'col_offset': 19, 'end_col_offset': 146, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Survived"] == 1) & (dfTitanic["Pclass"] == 3) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 24, 'lineno': 6, 'end_lineno': 6, 'col_offset': 149, 'end_col_offset': 245, 'type': 'Call1', 'code': 'dfTitanic.loc[(dfTitanic["Pclass"] == 3) & (dfTitanic["Sex"] == "female"), ["Survived"]].count()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 27, 'lineno': 3, 'end_lineno': 3, 'col_offset': 6, 'end_col_offset': 33, 'type': 'Call1', 'code': 'dfTitanic["Age"].describe()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 30, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 93, 'type': 'Assign1', 'code': 'dfTiFeSurvived = dfTitanic.loc[(dfTitanic["Sex"] == "female") & (dfTitanic["Survived"] == 1)]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 30, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 89, 'type': 'Assign1', 'code': 'dfTiFeDied = dfTitanic.loc[(dfTitanic["Sex"] == "female") & (dfTitanic["Survived"] == 0)]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 30, 'lineno': 3, 'end_lineno': 3, 'col_offset': 128, 'end_col_offset': 156, 'type': 'Call1', 'code': 'dfTiFeSurvived["Age"].mean()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 30, 'lineno': 3, 'end_lineno': 3, 'col_offset': 190, 'end_col_offset': 214, 'type': 'Call1', 'code': 'dfTiFeDied["Age"].mean()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 37, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 206, 'type': 'Assign1', 'code': 'dfBabies = dfBabyDirt[(dfBabyDirt["bwt"] != 999) & (dfBabyDirt["gestation"] != 999) & (dfBabyDirt["parity"] != 9) & (dfBabyDirt["height"] != 99) & (dfBabyDirt["weight"] != 999) & (dfBabyDirt["smoke"] != 9)]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 39, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==0]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 39, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==1]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 1, 'end_lineno': 1, 'col_offset': 12, 'end_col_offset': 63, 'type': 'Call1', 'code': 'dfBabies.loc[dfBabies["smoke"]==1]["weight"].mean()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 1, 'end_lineno': 1, 'col_offset': 12, 'end_col_offset': 46, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==1]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 2, 'end_lineno': 2, 'col_offset': 14, 'end_col_offset': 48, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==1]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 3, 'end_lineno': 3, 'col_offset': 13, 'end_col_offset': 64, 'type': 'Call1', 'code': 'dfBabies.loc[dfBabies["smoke"]==0]["weight"].mean()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 3, 'end_lineno': 3, 'col_offset': 13, 'end_col_offset': 47, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==0]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 43, 'lineno': 4, 'end_lineno': 4, 'col_offset': 15, 'end_col_offset': 49, 'type': 'Subscript1', 'code': 'dfBabies.loc[dfBabies["smoke"]==0]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 9, 'end_lineno': 9, 'col_offset': 14, 'end_col_offset': 72, 'type': 'Call1', 'code': 'df.dropna(subset=["STATE", "D", "GENERAL PERCENT"]).copy()'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 9, 'end_lineno': 9, 'col_offset': 14, 'end_col_offset': 65, 'type': 'Call1', 'code': 'df.dropna(subset=["STATE", "D", "GENERAL PERCENT"])'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 12, 'end_lineno': 12, 'col_offset': 8, 'end_col_offset': 29, 'type': 'Assign1', 'code': 'row = dfClean.iloc[i]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 13, 'end_lineno': 13, 'col_offset': 8, 'end_col_offset': 94, 'type': 'Assign2', 'code': 'row["GENERAL PERCENT"] = np.float(row["GENERAL PERCENT"].strip("%").replace(",", "."))'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 13, 'end_lineno': 13, 'col_offset': 42, 'end_col_offset': 93, 'type': 'Call1', 'code': 'row["GENERAL PERCENT"].strip("%").replace(",", ".")'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 14, 'end_lineno': 14, 'col_offset': 11, 'end_col_offset': 43, 'type': 'Call1', 'code': 'pd.isnull(row["CANDIDATE NAME"])'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 15, 'end_lineno': 15, 'col_offset': 15, 'end_col_offset': 54, 'type': 'Call1', 'code': 'pd.isnull(row["CANDIDATE NAME (Last)"])'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 16, 'end_lineno': 16, 'col_offset': 16, 'end_col_offset': 49, 'type': 'Assign2', 'code': 'row["CANDIDATE NAME"] = "UNKNOWN"'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 18, 'end_lineno': 18, 'col_offset': 16, 'end_col_offset': 68, 'type': 'Assign2', 'code': 'row["CANDIDATE NAME"] = row["CANDIDATE NAME (Last)"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 18, 'end_lineno': 18, 'col_offset': 16, 'end_col_offset': 68, 'type': 'Assign1', 'code': 'row["CANDIDATE NAME"] = row["CANDIDATE NAME (Last)"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 50, 'lineno': 20, 'end_lineno': 20, 'col_offset': 4, 'end_col_offset': 74, 'type': 'Assign1', 'code': 'dfClean = dfClean[["STATE", "D", "CANDIDATE NAME", "GENERAL PERCENT"]]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 6, 'end_lineno': 6, 'col_offset': 8, 'end_col_offset': 29, 'type': 'Assign1', 'code': 'row = dfClean.iloc[i]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 7, 'end_lineno': 7, 'col_offset': 8, 'end_col_offset': 89, 'type': 'Assign1', 'code': 'district = dfNew.loc[(dfNew["STATE"] == row["STATE"]) & (dfNew["D"] == row["D"])]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 10, 'end_lineno': 10, 'col_offset': 12, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'dfRow = row[["STATE", "D"]]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 11, 'end_lineno': 11, 'col_offset': 12, 'end_col_offset': 51, 'type': 'Assign2', 'code': 'dfRow["WINNER"] = row["CANDIDATE NAME"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 11, 'end_lineno': 11, 'col_offset': 12, 'end_col_offset': 51, 'type': 'Assign1', 'code': 'dfRow["WINNER"] = row["CANDIDATE NAME"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 33, 'type': 'Assign2', 'code': 'dfRow["MARGIN"] = 100'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 13, 'end_lineno': 13, 'col_offset': 12, 'end_col_offset': 52, 'type': 'Assign2', 'code': 'dfRow["WINPER"] = row["GENERAL PERCENT"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 13, 'end_lineno': 13, 'col_offset': 12, 'end_col_offset': 52, 'type': 'Assign1', 'code': 'dfRow["WINPER"] = row["GENERAL PERCENT"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 16, 'end_lineno': 16, 'col_offset': 12, 'end_col_offset': 81, 'type': 'Assign1', 'code': "(Margin, WinPer) = dfNew.loc[district.index[0], ['MARGIN', 'WINPER']]"}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 18, 'end_lineno': 18, 'col_offset': 16, 'end_col_offset': 79, 'type': 'Assign3', 'code': 'dfNew.loc[district.index[0], \'WINPER\'] = row["GENERAL PERCENT"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 18, 'end_lineno': 18, 'col_offset': 16, 'end_col_offset': 79, 'type': 'Assign1', 'code': 'dfNew.loc[district.index[0], \'WINPER\'] = row["GENERAL PERCENT"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 20, 'end_lineno': 20, 'col_offset': 16, 'end_col_offset': 88, 'type': 'Assign3', 'code': 'dfNew.loc[district.index[0], \'MARGIN\'] = WinPer - row["GENERAL PERCENT"]'}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 22, 'end_lineno': 22, 'col_offset': 12, 'end_col_offset': 42, 'type': 'Call1', 'code': "dfNew.sort_values(by='MARGIN')"}
{'notebook': 'hmwk01.ipynb', 'cell_id': 52, 'lineno': 23, 'end_lineno': 23, 'col_offset': 4, 'end_col_offset': 52, 'type': 'Call1', 'code': "dfNew.drop(['WINPER'], axis = 1, inplace = True)"}
{'notebook': 'customer_segments.ipynb', 'cell_id': 4, 'lineno': 2, 'end_lineno': 2, 'col_offset': 8, 'end_col_offset': 23, 'type': 'Call1', 'code': 'data.describe()'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 6, 'lineno': 2, 'end_lineno': 2, 'col_offset': 18, 'end_col_offset': 29, 'type': 'Call1', 'code': 'data.mean()'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 9, 'lineno': 2, 'end_lineno': 2, 'col_offset': 18, 'end_col_offset': 32, 'type': 'Call1', 'code': 'samples.copy()'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 9, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 54, 'type': 'Assign2', 'code': "samples_w_total['Total'] = samples_w_total.sum(axis=1)"}
{'notebook': 'customer_segments.ipynb', 'cell_id': 9, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 60, 'type': 'Assign2', 'code': "samples_percentage['Total'] = samples_percentage.sum(axis=1)"}
{'notebook': 'customer_segments.ipynb', 'cell_id': 9, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Expr1', 'code': 'samples_percentage'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 13, 'lineno': 2, 'end_lineno': 2, 'col_offset': 11, 'end_col_offset': 22, 'type': 'Call1', 'code': 'data.copy()'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 13, 'lineno': 4, 'end_lineno': 4, 'col_offset': 8, 'end_col_offset': 46, 'type': 'Call1', 'code': 'new_data.drop(column_to_study, axis=1)'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 13, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': 'y_all = data[column_to_study]'}
{'notebook': 'customer_segments.ipynb', 'cell_id': 55, 'lineno': 7, 'end_lineno': 7, 'col_offset': 11, 'end_col_offset': 84, 'type': 'Call1', 'code': "pd.concat([df_diffs, pd.Series(sample_preds, name='PREDICTION')], axis=1)"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 3, 'lineno': 2, 'end_lineno': 2, 'col_offset': 7, 'end_col_offset': 24, 'type': 'Call2', 'code': 'len(data.columns)'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 5, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 21, 'type': 'Assign2', 'code': 'data["Margalef"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 6, 'lineno': 3, 'end_lineno': 3, 'col_offset': 4, 'end_col_offset': 142, 'type': 'Assign3', 'code': "data.loc[i,'Margalef'] = (len(data.iloc[i][4:last][data.iloc[i][4:last]>0])-1)/math.log(sum(data.iloc[i][4:last][data.iloc[i][4:last]>0]))"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 6, 'lineno': 3, 'end_lineno': 3, 'col_offset': 34, 'end_col_offset': 78, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 6, 'lineno': 3, 'end_lineno': 3, 'col_offset': 96, 'end_col_offset': 140, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 11, 'end_col_offset': 33, 'type': 'Call1', 'code': 'data.RiverSeg.unique()'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 9, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': 'river = data.iloc[0]["River"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 10, 'end_lineno': 10, 'col_offset': 4, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["Margalef"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 10, 'end_lineno': 10, 'col_offset': 12, 'end_col_offset': 38, 'type': 'Subscript1', 'code': 'segDF[segDF["Margalef"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 13, 'end_lineno': 13, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 10, 'lineno': 16, 'end_lineno': 16, 'col_offset': 4, 'end_col_offset': 25, 'type': 'Assign1', 'code': 'y = segDF["Margalef"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 11, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Assign2', 'code': 'data["SWI_2"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 12, 'lineno': 6, 'end_lineno': 6, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 12, 'lineno': 6, 'end_lineno': 6, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 12, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 29, 'type': 'Assign3', 'code': "data.loc[i,'SWI_2'] = swi"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 35, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["SWI_2"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 35, 'type': 'Subscript1', 'code': 'segDF[segDF["SWI_2"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 14, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'y = segDF["SWI_2"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 15, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Assign2', 'code': 'data["SWI_e"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 16, 'lineno': 6, 'end_lineno': 6, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 16, 'lineno': 6, 'end_lineno': 6, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 16, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 29, 'type': 'Assign3', 'code': "data.loc[i,'SWI_e'] = swi"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 35, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["SWI_e"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 35, 'type': 'Subscript1', 'code': 'segDF[segDF["SWI_e"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 18, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'y = segDF["SWI_e"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 19, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Assign2', 'code': 'data["SWI_10"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 20, 'lineno': 6, 'end_lineno': 6, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 20, 'lineno': 6, 'end_lineno': 6, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 20, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 30, 'type': 'Assign3', 'code': "data.loc[i,'SWI_10'] = swi"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 36, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["SWI_10"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 36, 'type': 'Subscript1', 'code': 'segDF[segDF["SWI_10"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 22, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 23, 'type': 'Assign1', 'code': 'y = segDF["SWI_10"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 23, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Assign2', 'code': 'data["lam"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 24, 'lineno': 11, 'end_lineno': 11, 'col_offset': 4, 'end_col_offset': 27, 'type': 'Assign3', 'code': "data.loc[i,'lam'] = lam"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 33, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 33, 'type': 'Subscript1', 'code': 'segDF[segDF["lam"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 26, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 20, 'type': 'Assign1', 'code': 'y = segDF["lam"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 27, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Assign2', 'code': 'data["1-lam"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 28, 'lineno': 11, 'end_lineno': 11, 'col_offset': 4, 'end_col_offset': 33, 'type': 'Assign3', 'code': "data.loc[i,'1-lam'] = 1 - lam"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 35, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["1-lam"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 35, 'type': 'Subscript1', 'code': 'segDF[segDF["1-lam"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 30, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'y = segDF["1-lam"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 31, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 17, 'type': 'Assign2', 'code': 'data["lam\'"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 32, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 32, 'type': 'Assign1', 'code': 'array = data.iloc[i][4:last]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 32, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 28, 'type': 'Assign3', 'code': 'data.loc[i,"lam\'"] = lam'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 34, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'y = segDF["lam\'"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 35, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Assign2', 'code': 'data["1-lam\'"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 36, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 32, 'type': 'Assign1', 'code': 'array = data.iloc[i][4:last]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 36, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign3', 'code': 'data.loc[i,"1-lam\'"] = 1 - lam'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 11, 'end_lineno': 11, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 13, 'end_lineno': 13, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 38, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 23, 'type': 'Assign1', 'code': 'y = segDF["1-lam\'"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 39, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 15, 'type': 'Assign2', 'code': 'data["N1"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 40, 'lineno': 6, 'end_lineno': 6, 'col_offset': 40, 'end_col_offset': 84, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 40, 'lineno': 6, 'end_lineno': 6, 'col_offset': 119, 'end_col_offset': 163, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 40, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 35, 'type': 'Assign3', 'code': "data.loc[i,'N1'] = math.exp(N1)"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 42, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 19, 'type': 'Assign1', 'code': 'y = segDF["N1"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 43, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 15, 'type': 'Assign2', 'code': 'data["N2"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 44, 'lineno': 11, 'end_lineno': 11, 'col_offset': 4, 'end_col_offset': 28, 'type': 'Assign3', 'code': "data.loc[i,'N2'] = 1/lam"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 46, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 19, 'type': 'Assign1', 'code': 'y = segDF["N2"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 47, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Assign2', 'code': 'data["N_Inf"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 48, 'lineno': 10, 'end_lineno': 10, 'col_offset': 4, 'end_col_offset': 32, 'type': 'Assign1', 'code': 'array = data.iloc[i][4:last]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 48, 'lineno': 11, 'end_lineno': 11, 'col_offset': 4, 'end_col_offset': 42, 'type': 'Assign3', 'code': "data.loc[i,'N_Inf'] = 1/(max(array)/N)"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 50, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'y = segDF["N_Inf"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 51, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Assign2', 'code': 'data["N10"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 52, 'lineno': 6, 'end_lineno': 6, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 52, 'lineno': 6, 'end_lineno': 6, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 52, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 87, 'type': 'Assign3', 'code': "data.loc[i,'N10'] = math.exp(swi)/len(data.iloc[i][4:last][data.iloc[i][4:last]>0])"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 52, 'lineno': 7, 'end_lineno': 7, 'col_offset': 42, 'end_col_offset': 86, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 10, 'end_lineno': 10, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 10, 'end_lineno': 10, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 13, 'end_lineno': 13, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 54, 'lineno': 16, 'end_lineno': 16, 'col_offset': 4, 'end_col_offset': 20, 'type': 'Assign1', 'code': 'y = segDF["N10"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 55, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 17, 'type': 'Assign2', 'code': 'data["N10\'"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 56, 'lineno': 6, 'end_lineno': 6, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 56, 'lineno': 6, 'end_lineno': 6, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 56, 'lineno': 8, 'end_lineno': 8, 'col_offset': 8, 'end_col_offset': 100, 'type': 'Assign3', 'code': 'data.loc[i,"N10\'"] = (math.exp(swi)-1)/(len(data.iloc[i][4:last][data.iloc[i][4:last]>0])-1)'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 56, 'lineno': 8, 'end_lineno': 8, 'col_offset': 52, 'end_col_offset': 96, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 56, 'lineno': 10, 'end_lineno': 10, 'col_offset': 8, 'end_col_offset': 30, 'type': 'Assign3', 'code': 'data.loc[i,"N10\'"] = 0'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 58, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'y = segDF["N10\'"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 59, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Assign2', 'code': 'data["N21"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 60, 'lineno': 16, 'end_lineno': 16, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 60, 'lineno': 16, 'end_lineno': 16, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 60, 'lineno': 19, 'end_lineno': 19, 'col_offset': 4, 'end_col_offset': 29, 'type': 'Assign3', 'code': 'data.loc[i,"N21"] = N2/N1'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 62, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 20, 'type': 'Assign1', 'code': 'y = segDF["N21"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 63, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 17, 'type': 'Assign2', 'code': 'data["N21\'"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 64, 'lineno': 17, 'end_lineno': 17, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 64, 'lineno': 17, 'end_lineno': 17, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 64, 'lineno': 21, 'end_lineno': 21, 'col_offset': 4, 'end_col_offset': 38, 'type': 'Assign3', 'code': 'data.loc[i,"N21\'"] = (N2-1)/(N1-1)'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 66, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'y = segDF["N21\'"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 67, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Assign2', 'code': 'data["Pielou"] = ""'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 68, 'lineno': 14, 'end_lineno': 14, 'col_offset': 41, 'end_col_offset': 85, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 68, 'lineno': 14, 'end_lineno': 14, 'col_offset': 120, 'end_col_offset': 164, 'type': 'Subscript1', 'code': 'data.iloc[i][4:last][data.iloc[i][4:last]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 68, 'lineno': 17, 'end_lineno': 17, 'col_offset': 4, 'end_col_offset': 46, 'type': 'Assign3', 'code': "data.loc[i,'Pielou'] = swi/math.log(count)"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 49, 'type': 'Assign1', 'code': "segDF = data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 8, 'end_lineno': 8, 'col_offset': 12, 'end_col_offset': 49, 'type': 'Subscript1', 'code': "data.loc[data['RiverSeg'] == segment]"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'segDF = segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 9, 'end_lineno': 9, 'col_offset': 12, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'segDF[segDF["lam\'"]>0]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 12, 'end_lineno': 12, 'col_offset': 12, 'end_col_offset': 37, 'type': 'Call1', 'code': "segDF.sort_values('Year')"}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'x = segDF["Year"]'}
{'notebook': 'Large_River_Monitoring_Forum_Biodiversity_Indices_Analysis.ipynb', 'cell_id': 70, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 23, 'type': 'Assign1', 'code': 'y = segDF["Pielou"]'}
{'notebook': 'ml_analysis.ipynb', 'cell_id': 1, 'lineno': 3, 'end_lineno': 3, 'col_offset': 4, 'end_col_offset': 126, 'type': 'Call1', 'code': "modeling_df.drop(['DATE', 'HourlySkyConditions', 'REPORT_TYPE', 'join_time', 'actual_weather_delay', 'avg_delay'], axis=1)"}
{'notebook': 'ml_analysis.ipynb', 'cell_id': 1, 'lineno': 9, 'end_lineno': 9, 'col_offset': 36, 'end_col_offset': 61, 'type': 'Call2', 'code': 'str(train_features.shape)'}
{'notebook': 'ml_analysis.ipynb', 'cell_id': 1, 'lineno': 10, 'end_lineno': 10, 'col_offset': 35, 'end_col_offset': 59, 'type': 'Call2', 'code': 'str(test_features.shape)'}
{'notebook': 'ml_analysis.ipynb', 'cell_id': 1, 'lineno': 11, 'end_lineno': 11, 'col_offset': 36, 'end_col_offset': 60, 'type': 'Call2', 'code': 'str(train_outcome.shape)'}
{'notebook': 'ml_analysis.ipynb', 'cell_id': 1, 'lineno': 12, 'end_lineno': 12, 'col_offset': 35, 'end_col_offset': 58, 'type': 'Call2', 'code': 'str(test_outcome.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 3, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Expr3', 'code': 'boston.columns'}
{'notebook': 'boston_model.ipynb', 'cell_id': 5, 'lineno': 7, 'end_lineno': 7, 'col_offset': 12, 'end_col_offset': 50, 'type': 'Call1', 'code': 'pd.concat([boston, boston_mf], axis=1)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 5, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Call1', 'code': 'boston_join.head()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 6, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Expr3', 'code': 'boston_join.columns'}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 66, 'type': 'Assign2', 'code': "boston_join['5K Duration'] = boston_join['5K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 11, 'end_lineno': 11, 'col_offset': 29, 'end_col_offset': 66, 'type': 'Call1', 'code': "boston_join['5K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 12, 'end_lineno': 12, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['10K Duration'] = boston_join['10K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 12, 'end_lineno': 12, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['10K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 13, 'end_lineno': 13, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['15K Duration'] = boston_join['15K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 13, 'end_lineno': 13, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['15K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 14, 'end_lineno': 14, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['20K Duration'] = boston_join['20K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 14, 'end_lineno': 14, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['20K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 15, 'end_lineno': 15, 'col_offset': 0, 'end_col_offset': 70, 'type': 'Assign2', 'code': "boston_join['Half Duration'] = boston_join['Half'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 15, 'end_lineno': 15, 'col_offset': 31, 'end_col_offset': 70, 'type': 'Call1', 'code': "boston_join['Half'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 16, 'end_lineno': 16, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['25K Duration'] = boston_join['25K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 16, 'end_lineno': 16, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['25K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 17, 'end_lineno': 17, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['30K Duration'] = boston_join['30K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 17, 'end_lineno': 17, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['30K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 18, 'end_lineno': 18, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['35K Duration'] = boston_join['35K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 18, 'end_lineno': 18, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['35K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 19, 'end_lineno': 19, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "boston_join['40K Duration'] = boston_join['40K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 19, 'end_lineno': 19, 'col_offset': 30, 'end_col_offset': 68, 'type': 'Call1', 'code': "boston_join['40K'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 20, 'end_lineno': 20, 'col_offset': 0, 'end_col_offset': 88, 'type': 'Assign2', 'code': "boston_join['Official Time Duration'] = boston_join['Official Time'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 20, 'end_lineno': 20, 'col_offset': 40, 'end_col_offset': 88, 'type': 'Call1', 'code': "boston_join['Official Time'].apply(time_convert)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 24, 'end_lineno': 24, 'col_offset': 0, 'end_col_offset': 227, 'type': 'Call1', 'code': "boston_join.dropna(inplace=True,subset=['Bib','Age','5K Duration','10K Duration','15K Duration','20K Duration', 'Half Duration', '25K Duration','30K Duration','35K Duration','40K Duration','Official Time Duration', 'Temp (F)'])"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 26, 'end_lineno': 26, 'col_offset': 0, 'end_col_offset': 223, 'type': 'Assign1', 'code': "boston_clean=boston_join[['Bib','Age','5K Duration','10K Duration','15K Duration','20K Duration', 'Half Duration', '25K Duration','30K Duration','35K Duration','40K Duration','Official Time Duration', 'Temp (F)', 'F', 'M']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 7, 'lineno': 30, 'end_lineno': 30, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Expr3', 'code': 'boston_clean.columns'}
{'notebook': 'boston_model.ipynb', 'cell_id': 9, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 81, 'type': 'Assign1', 'code': "X_5K = boston_clean[['Bib','Age','Official Time Duration', 'F', 'M', 'Temp (F)']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 9, 'lineno': 3, 'end_lineno': 3, 'col_offset': 7, 'end_col_offset': 56, 'type': 'Call1', 'code': "boston_clean['5K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 9, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Call2', 'code': 'print(X_5K.shape, y_5K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 11, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 17, 'type': 'Call1', 'code': 'X_train_5K.head()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 21, 'lineno': 4, 'end_lineno': 4, 'col_offset': 43, 'end_col_offset': 58, 'type': 'Call1', 'code': 'y_test_5K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 32, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 78, 'type': 'Assign1', 'code': "X_nobib = boston_clean[['Age','Official Time Duration', 'F', 'M', 'Temp (F)']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 32, 'lineno': 5, 'end_lineno': 5, 'col_offset': 10, 'end_col_offset': 59, 'type': 'Call1', 'code': "boston_clean['5K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 32, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 35, 'type': 'Call2', 'code': 'print(X_nobib.shape, y_nobib.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 32, 'lineno': 30, 'end_lineno': 30, 'col_offset': 46, 'end_col_offset': 64, 'type': 'Call1', 'code': 'y_test_nobib.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 34, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 98, 'type': 'Assign1', 'code': "X_10K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 34, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['10K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 34, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_10K.shape, y_10K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 34, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_10K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 35, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 15, 'type': 'Expr1', 'code': 'predictions_10K'}
{'notebook': 'boston_model.ipynb', 'cell_id': 38, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 114, 'type': 'Assign1', 'code': "X_15K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 38, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['15K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 38, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_15K.shape, y_15K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 38, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_15K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 41, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 130, 'type': 'Assign1', 'code': "X_20K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 41, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['20K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 41, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_20K.shape, y_20K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 41, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_20K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 44, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 147, 'type': 'Assign1', 'code': "X_Half = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 44, 'lineno': 5, 'end_lineno': 5, 'col_offset': 9, 'end_col_offset': 60, 'type': 'Call1', 'code': "boston_clean['Half Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 44, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 33, 'type': 'Call2', 'code': 'print(X_Half.shape, y_Half.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 44, 'lineno': 30, 'end_lineno': 30, 'col_offset': 45, 'end_col_offset': 62, 'type': 'Call1', 'code': 'y_test_Half.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 47, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 163, 'type': 'Assign1', 'code': "X_25K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration', 'Half Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 47, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['25K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 47, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_25K.shape, y_25K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 47, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_25K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 50, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 178, 'type': 'Assign1', 'code': "X_30K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration','Half Duration', '25K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 50, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['30K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 50, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_30K.shape, y_30K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 50, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_30K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 53, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 195, 'type': 'Assign1', 'code': "X_35K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration', 'Half Duration','25K Duration',  '30K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 53, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['35K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 53, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_30K.shape, y_30K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 53, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_35K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 56, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 211, 'type': 'Assign1', 'code': "X_40K = boston_clean[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration',  'Half Duration', '25K Duration', '30K Duration','35K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 56, 'lineno': 5, 'end_lineno': 5, 'col_offset': 8, 'end_col_offset': 58, 'type': 'Call1', 'code': "boston_clean['40K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 56, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call2', 'code': 'print(X_40K.shape, y_40K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 56, 'lineno': 30, 'end_lineno': 30, 'col_offset': 44, 'end_col_offset': 60, 'type': 'Call1', 'code': 'y_test_40K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 59, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 203, 'type': 'Assign1', 'code': "X_Final = boston_clean[['Bib', 'Age', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration','Half Duration', '25K Duration', '30K Duration', '35K Duration', '40K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 59, 'lineno': 5, 'end_lineno': 5, 'col_offset': 10, 'end_col_offset': 70, 'type': 'Call1', 'code': "boston_clean['Official Time Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 59, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 35, 'type': 'Call2', 'code': 'print(X_Final.shape, y_Final.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 59, 'lineno': 30, 'end_lineno': 30, 'col_offset': 46, 'end_col_offset': 64, 'type': 'Call1', 'code': 'y_test_Final.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 62, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Expr3', 'code': 'boston_clean.columns'}
{'notebook': 'boston_model.ipynb', 'cell_id': 63, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 10, 'type': 'Expr1', 'code': 'boston_mse'}
{'notebook': 'boston_model.ipynb', 'cell_id': 64, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 9, 'type': 'Expr1', 'code': 'boston_r2'}
{'notebook': 'boston_model.ipynb', 'cell_id': 65, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Expr1', 'code': 'boston_residuals_df'}
{'notebook': 'boston_model.ipynb', 'cell_id': 68, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 55, 'type': 'Assign1', 'code': "boston_females=boston_clean.loc[boston_clean['F'] == 1]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 68, 'lineno': 1, 'end_lineno': 1, 'col_offset': 15, 'end_col_offset': 55, 'type': 'Subscript1', 'code': "boston_clean.loc[boston_clean['F'] == 1]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 68, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Expr1', 'code': 'boston_females'}
{'notebook': 'boston_model.ipynb', 'cell_id': 69, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 213, 'type': 'Assign1', 'code': "X_F40K = boston_females[['Bib', 'Age','Official Time Duration', 'F', 'M', 'Temp (F)', '5K Duration', '10K Duration', '15K Duration', '20K Duration','Half Duration', '25K Duration', '30K Duration', '35K Duration']]"}
{'notebook': 'boston_model.ipynb', 'cell_id': 69, 'lineno': 5, 'end_lineno': 5, 'col_offset': 9, 'end_col_offset': 61, 'type': 'Call1', 'code': "boston_females['40K Duration'].values.reshape(-1, 1)"}
{'notebook': 'boston_model.ipynb', 'cell_id': 69, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 33, 'type': 'Call2', 'code': 'print(X_F40K.shape, y_F40K.shape)'}
{'notebook': 'boston_model.ipynb', 'cell_id': 69, 'lineno': 30, 'end_lineno': 30, 'col_offset': 45, 'end_col_offset': 62, 'type': 'Call1', 'code': 'y_test_F40K.max()'}
{'notebook': 'boston_model.ipynb', 'cell_id': 70, 'lineno': 22, 'end_lineno': 22, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Expr1', 'code': 'boston_residuals_df'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 11, 'lineno': 1, 'end_lineno': 1, 'col_offset': 43, 'end_col_offset': 61, 'type': 'Call2', 'code': 'list(data.columns)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 20, 'lineno': 2, 'end_lineno': 2, 'col_offset': 11, 'end_col_offset': 41, 'type': 'Call1', 'code': 'data.describe(include = "all")'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 20, 'lineno': 8, 'end_lineno': 8, 'col_offset': 17, 'end_col_offset': 50, 'type': 'Call1', 'code': 'describe_transposed.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 21, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Expr1', 'code': 'describe_final'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 25, 'lineno': 2, 'end_lineno': 2, 'col_offset': 15, 'end_col_offset': 45, 'type': 'Call1', 'code': 'dtypes_dataframe.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 26, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'dtypes_final.head()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 28, 'lineno': 3, 'end_lineno': 3, 'col_offset': 22, 'end_col_offset': 54, 'type': 'Call1', 'code': 'data.notnull().sum().astype(int)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 28, 'lineno': 4, 'end_lineno': 4, 'col_offset': 20, 'end_col_offset': 33, 'type': 'Call1', 'code': 'data.isnull()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 28, 'lineno': 4, 'end_lineno': 4, 'col_offset': 20, 'end_col_offset': 51, 'type': 'Call1', 'code': 'data.isnull().sum().astype(int)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 28, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 26, 'type': 'Assign1', 'code': 'totalcount = data.shape[0]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 1, 'end_lineno': 1, 'col_offset': 15, 'end_col_offset': 78, 'type': 'Call1', 'code': 'percent_null.reset_index().rename(columns = {0:"null_percent"})'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 1, 'end_lineno': 1, 'col_offset': 15, 'end_col_offset': 41, 'type': 'Call1', 'code': 'percent_null.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 2, 'end_lineno': 2, 'col_offset': 17, 'end_col_offset': 45, 'type': 'Call1', 'code': 'percent_filled.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 2, 'end_lineno': 2, 'col_offset': 17, 'end_col_offset': 86, 'type': 'Call1', 'code': 'percent_filled.reset_index().rename(columns = {0:"non_null_percent"})'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 3, 'end_lineno': 3, 'col_offset': 22, 'end_col_offset': 95, 'type': 'Call1', 'code': 'filled_count_series.reset_index().rename(columns = {0:"non_null_counts"})'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 3, 'end_lineno': 3, 'col_offset': 22, 'end_col_offset': 55, 'type': 'Call1', 'code': 'filled_count_series.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 4, 'end_lineno': 4, 'col_offset': 20, 'end_col_offset': 87, 'type': 'Call1', 'code': 'null_count_series.reset_index().rename(columns = {0:"null_counts"})'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 30, 'lineno': 4, 'end_lineno': 4, 'col_offset': 20, 'end_col_offset': 51, 'type': 'Call1', 'code': 'null_count_series.reset_index()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 32, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 26, 'type': 'Call1', 'code': 'null_info_dataframe.head()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 36, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 32, 'type': 'Assign2', 'code': 'merged["row_count"] = totalcount'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 36, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Call1', 'code': 'merged.drop(["count"], axis = 1, inplace = True)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 37, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Call1', 'code': 'merged.head()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 39, 'lineno': 5, 'end_lineno': 5, 'col_offset': 4, 'end_col_offset': 46, 'type': 'Assign1', 'code': 'unique_value = merged.loc[index, "unique"]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 39, 'lineno': 9, 'end_lineno': 9, 'col_offset': 8, 'end_col_offset': 49, 'type': 'Assign1', 'code': 'feature_name = merged.loc[index, "index"]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 39, 'lineno': 13, 'end_lineno': 13, 'col_offset': 8, 'end_col_offset': 55, 'type': 'Assign3', 'code': 'merged.loc[index, "unique"] = number_of_uniques'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 41, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 53, 'type': 'Assign2', 'code': 'merged["data_type"] = merged["data_type"].astype(str)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 41, 'lineno': 2, 'end_lineno': 2, 'col_offset': 22, 'end_col_offset': 53, 'type': 'Call1', 'code': 'merged["data_type"].astype(str)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 43, 'lineno': 1, 'end_lineno': 1, 'col_offset': 24, 'end_col_offset': 52, 'type': 'Call1', 'code': 'merged["data_type"].unique()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 43, 'lineno': 12, 'end_lineno': 12, 'col_offset': 25, 'end_col_offset': 53, 'type': 'Call1', 'code': 'merged[column].astype(float)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 46, 'lineno': 2, 'end_lineno': 2, 'col_offset': 20, 'end_col_offset': 40, 'type': 'Call2', 'code': 'list(merged.columns)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 46, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'column = merged.loc[index, "index"]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 46, 'lineno': 18, 'end_lineno': 18, 'col_offset': 8, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'value = merged.loc[index, attr]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 56, 'lineno': 11, 'end_lineno': 11, 'col_offset': 4, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'sub_dictionary = profile_dict[key]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 56, 'lineno': 15, 'end_lineno': 15, 'col_offset': 8, 'end_col_offset': 27, 'type': 'Assign1', 'code': 'attribute = keys[0]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 56, 'lineno': 16, 'end_lineno': 16, 'col_offset': 8, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'value = dictionary[attribute]'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 62, 'lineno': 9, 'end_lineno': 9, 'col_offset': 24, 'end_col_offset': 58, 'type': 'Call1', 'code': 'data.dropna(how = "any", axis = 0)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 62, 'lineno': 11, 'end_lineno': 12, 'col_offset': 14, 'end_col_offset': 33, 'type': 'Call2', 'code': '"Shape of original dataset {}"\\              .format(data.shape)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 62, 'lineno': 13, 'end_lineno': 14, 'col_offset': 14, 'end_col_offset': 82, 'type': 'Call2', 'code': '"Shape of visualization dataset {}. \\n{} Records were removed (containing nulls)."\\              .format(data_no_nulls.shape, data.shape[0] - data_no_nulls.shape[0])'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 62, 'lineno': 29, 'end_lineno': 29, 'col_offset': 36, 'end_col_offset': 94, 'type': 'Call1', 'code': 'data_no_nulls[column].fillna(data_no_nulls[column].mean())'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 62, 'lineno': 29, 'end_lineno': 29, 'col_offset': 65, 'end_col_offset': 93, 'type': 'Call1', 'code': 'data_no_nulls[column].mean()'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 64, 'lineno': 1, 'end_lineno': 1, 'col_offset': 28, 'end_col_offset': 55, 'type': 'Call2', 'code': 'list(data_no_nulls.columns)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 64, 'lineno': 6, 'end_lineno': 6, 'col_offset': 12, 'end_col_offset': 67, 'type': 'Call1', 'code': 'data_no_nulls.drop([feature], axis = 1, inplace = True)'}
{'notebook': 'notebook_data_profililng.ipynb', 'cell_id': 69, 'lineno': 4, 'end_lineno': 4, 'col_offset': 32, 'end_col_offset': 65, 'type': 'Call1', 'code': 'data_no_nulls[column].astype(str)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 2, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'region_stats.head()'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 3, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Call1', 'code': 'region_stats.groupby("region").size()'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 4, 'lineno': 2, 'end_lineno': 2, 'col_offset': 23, 'end_col_offset': 62, 'type': 'Call1', 'code': "region_stats.groupby(['region']).mean()"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 4, 'lineno': 3, 'end_lineno': 3, 'col_offset': 14, 'end_col_offset': 62, 'type': 'Call1', 'code': 'grouped_region_stats.drop(columns=["school_id"])'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 4, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 98, 'type': 'Assign2', 'code': "region_mean['earnings_cost_ratio'] = region_mean['earnings6years']/region_mean['tuition_in_state']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 4, 'lineno': 8, 'end_lineno': 8, 'col_offset': 16, 'end_col_offset': 39, 'type': 'Call1', 'code': 'region_mean.drop([0,9])'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 4, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Expr1', 'code': 'mean_df_clean'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 6, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'y1 = mean_df_clean["tuition_in_state"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 6, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 36, 'type': 'Assign1', 'code': 'y2 = mean_df_clean["earnings6years"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'y_axis = mean_df_clean["earnings_cost_ratio"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 47, 'type': 'Assign1', 'code': "tuition_list = region_stats['tuition_in_state']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 13, 'end_lineno': 13, 'col_offset': 24, 'end_col_offset': 51, 'type': 'Call1', 'code': 'tuition_list.quantile(0.25)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 17, 'end_lineno': 17, 'col_offset': 19, 'end_col_offset': 46, 'type': 'Call1', 'code': 'tuition_list.quantile(0.50)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 21, 'end_lineno': 21, 'col_offset': 25, 'end_col_offset': 52, 'type': 'Call1', 'code': 'tuition_list.quantile(0.75)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 25, 'end_lineno': 25, 'col_offset': 24, 'end_col_offset': 48, 'type': 'Call1', 'code': 'tuition_list.quantile(1)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 9, 'lineno': 29, 'end_lineno': 29, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Expr1', 'code': 'quartile_bins'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 100, 'type': 'Assign2', 'code': 'region_stats["tuition_cost_tier"] = pd.cut(region_stats["tuition_in_state"], bins, labels=bin_names)'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign1', 'code': "cost = region_stats['tuition_in_state']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 42, 'type': 'Assign1', 'code': "earnings6 = region_stats['earnings6years']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': "earnings10 = region_stats['earnings10years']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 52, 'type': 'Assign2', 'code': "region_stats['earnings_cost_ratio'] = earnings6/cost"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 61, 'type': 'Assign2', 'code': "region_stats['earnings_growth_y6_y10'] = earnings10/earnings6"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 10, 'lineno': 12, 'end_lineno': 12, 'col_offset': 0, 'end_col_offset': 121, 'type': 'Assign2', 'code': "region_stats['weighted_growth_to_tuition'] = region_stats['earnings_cost_ratio'] * region_stats['earnings_growth_y6_y10']"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 11, 'lineno': 2, 'end_lineno': 2, 'col_offset': 13, 'end_col_offset': 74, 'type': 'Call1', 'code': "region_stats.drop(columns=['school_id', 'tuition_out_state'])"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 71, 'type': 'Assign1', 'code': 'df0_10k = clean_info.loc[clean_info["tuition_cost_tier"] == \'less_10k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 2, 'end_lineno': 2, 'col_offset': 10, 'end_col_offset': 71, 'type': 'Subscript1', 'code': 'clean_info.loc[clean_info["tuition_cost_tier"] == \'less_10k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': 'df0_10k_edit0 = df0_10k[df0_10k.region != 0]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 3, 'end_lineno': 3, 'col_offset': 16, 'end_col_offset': 44, 'type': 'Subscript1', 'code': 'df0_10k[df0_10k.region != 0]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 56, 'type': 'Assign1', 'code': 'df0_10k_edit9 = df0_10k_edit0[df0_10k_edit0.region != 9]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 4, 'end_lineno': 4, 'col_offset': 16, 'end_col_offset': 56, 'type': 'Subscript1', 'code': 'df0_10k_edit0[df0_10k_edit0.region != 9]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 71, 'type': 'Assign1', 'code': 'df10_18k = clean_info.loc[clean_info["tuition_cost_tier"] == \'10k_18k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 6, 'end_lineno': 6, 'col_offset': 11, 'end_col_offset': 71, 'type': 'Subscript1', 'code': 'clean_info.loc[clean_info["tuition_cost_tier"] == \'10k_18k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign1', 'code': 'df10_18k_edit = df10_18k[df10_18k.region != 9]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 7, 'end_lineno': 7, 'col_offset': 16, 'end_col_offset': 46, 'type': 'Subscript1', 'code': 'df10_18k[df10_18k.region != 9]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 70, 'type': 'Assign1', 'code': 'df18_32 = clean_info.loc[clean_info["tuition_cost_tier"] == \'18k_32k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 9, 'end_lineno': 9, 'col_offset': 10, 'end_col_offset': 70, 'type': 'Subscript1', 'code': 'clean_info.loc[clean_info["tuition_cost_tier"] == \'18k_32k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 71, 'type': 'Assign1', 'code': 'df32 = clean_info.loc[clean_info["tuition_cost_tier"] == \'greater_32k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 12, 'lineno': 11, 'end_lineno': 11, 'col_offset': 7, 'end_col_offset': 71, 'type': 'Subscript1', 'code': 'clean_info.loc[clean_info["tuition_cost_tier"] == \'greater_32k\']'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 13, 'lineno': 2, 'end_lineno': 2, 'col_offset': 18, 'end_col_offset': 58, 'type': 'Call1', 'code': "df0_10k_edit9.groupby(['region']).mean()"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 13, 'lineno': 4, 'end_lineno': 4, 'col_offset': 19, 'end_col_offset': 59, 'type': 'Call1', 'code': "df10_18k_edit.groupby(['region']).mean()"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 13, 'lineno': 6, 'end_lineno': 6, 'col_offset': 18, 'end_col_offset': 52, 'type': 'Call1', 'code': "df18_32.groupby(['region']).mean()"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 13, 'lineno': 8, 'end_lineno': 8, 'col_offset': 15, 'end_col_offset': 46, 'type': 'Call1', 'code': "df32.groupby(['region']).mean()"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 3, 'col_offset': 11, 'end_col_offset': 109, 'type': 'Call1', 'code': "df0_10k_grouped.drop(['tuition_in_state','earnings6years',                                 'earnings10years','earnings_cost_ratio','earnings_growth_y6_y10'], axis = 1)"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 16, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 72, 'type': 'Call1', 'code': "table10k.rename(columns={'weighted_growth_to_tuition':'Worth-It Ratio'})"}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 18, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign1', 'code': 'y_axis1 = df0_10k_grouped["earnings_cost_ratio"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 18, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 49, 'type': 'Assign1', 'code': 'y_axis2 = df10_18k_grouped["earnings_cost_ratio"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 18, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign1', 'code': 'y_axis3 = df18_32_grouped["earnings_cost_ratio"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 18, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'y_axis4 = df32_grouped["earnings_cost_ratio"]'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 19, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 17, 'type': 'Expr1', 'code': 'earningsgrowth10k'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 19, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 7, 'type': 'Expr1', 'code': 'y_axis1'}
{'notebook': 'Python Analytics - Best Region for Undergrad Degrees.ipynb', 'cell_id': 20, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Expr1', 'code': 'weighted_growth10k'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 3, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 32, 'type': 'Call1', 'code': 'data[data.symbol == "FB"].head()'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 3, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 25, 'type': 'Subscript1', 'code': 'data[data.symbol == "FB"]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 4, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call1', 'code': 'data.symbol.unique()'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 5, 'lineno': 1, 'end_lineno': 1, 'col_offset': 4, 'end_col_offset': 24, 'type': 'Call1', 'code': 'data.symbol.unique()'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 9, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'aapl = data[data.symbol == "AAPL"]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 9, 'lineno': 5, 'end_lineno': 5, 'col_offset': 7, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'data[data.symbol == "AAPL"]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 12, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 28, 'type': 'Assign1', 'code': 'aapl_close = aapl[["close"]]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 12, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'dates = aapl[["date"]]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 12, 'lineno': 7, 'end_lineno': 7, 'col_offset': 14, 'end_col_offset': 72, 'type': 'Call1', 'code': 'aapl_close.apply(lambda x: np.log(x) - np.log(x.shift(1)))'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 16, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 36, 'type': 'Assign1', 'code': 'googl = data[data.symbol == "GOOGL"]'}
{'notebook': 'NYSE-Data Analysis.ipynb', 'cell_id': 16, 'lineno': 1, 'end_lineno': 1, 'col_offset': 8, 'end_col_offset': 36, 'type': 'Subscript1', 'code': 'data[data.symbol == "GOOGL"]'}
{'notebook': 'college-summary.ipynb', 'cell_id': 7, 'lineno': 1, 'end_lineno': 1, 'col_offset': 9, 'end_col_offset': 89, 'type': 'Call1', 'code': 'pd.concat([old_df, f18_df], verify_integrity=True, ignore_index=True, sort=True)'}
{'notebook': 'college-summary.ipynb', 'cell_id': 7, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Call1', 'code': 'all_df.head()'}
{'notebook': 'college-summary.ipynb', 'cell_id': 9, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 60, 'type': 'Assign2', 'code': "all_df['Created At DOW'] = all_df['Created At'].dt.dayofweek"}
{'notebook': 'college-summary.ipynb', 'cell_id': 10, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 92, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Created At DOW'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 10, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 92, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Created At DOW'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 12, 'lineno': 23, 'end_lineno': 23, 'col_offset': 22, 'end_col_offset': 78, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Column'].value_counts()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 12, 'lineno': 24, 'end_lineno': 24, 'col_offset': 22, 'end_col_offset': 78, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Column'].value_counts()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 14, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': "all_df['Duration'] = (all_df['Completed At'] - all_df['Created At'])"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 122, 'type': 'Subscript1', 'code': "get_semester_asana(all_df, sem)[(get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]') < 30)]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 163, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)[(get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]') < 30)]['Duration'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 5, 'end_lineno': 5, 'col_offset': 47, 'end_col_offset': 115, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 122, 'type': 'Subscript1', 'code': "get_semester_asana(all_df, sem)[(get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]') < 30)]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 163, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)[(get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]') < 30)]['Duration'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 15, 'lineno': 6, 'end_lineno': 6, 'col_offset': 47, 'end_col_offset': 115, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Duration'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 2, 'col_offset': 26, 'end_col_offset': 98, 'type': 'Call1', 'code': "all_df[all_df['Duration'].astype('timedelta64[D]') < 3]['Name'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 2, 'col_offset': 26, 'end_col_offset': 81, 'type': 'Subscript1', 'code': "all_df[all_df['Duration'].astype('timedelta64[D]') < 3]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 2, 'col_offset': 33, 'end_col_offset': 76, 'type': 'Call1', 'code': "all_df['Duration'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 3, 'end_lineno': 3, 'col_offset': 26, 'end_col_offset': 82, 'type': 'Subscript1', 'code': "all_df[all_df['Duration'].astype('timedelta64[D]') >= 3]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 3, 'end_lineno': 3, 'col_offset': 26, 'end_col_offset': 99, 'type': 'Call1', 'code': "all_df[all_df['Duration'].astype('timedelta64[D]') >= 3]['Name'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 16, 'lineno': 3, 'end_lineno': 3, 'col_offset': 33, 'end_col_offset': 76, 'type': 'Call1', 'code': "all_df['Duration'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 18, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 66, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Due Date'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 18, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 81, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Due Date'].dropna().value_counts()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 18, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 66, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Due Date'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 18, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 81, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Due Date'].dropna().value_counts()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 20, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 63, 'type': 'Assign2', 'code': "all_df['Overdue'] = all_df['Completed At'] - all_df['Due Date']"}
{'notebook': 'college-summary.ipynb', 'cell_id': 21, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 85, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Overdue'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 21, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 85, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Overdue'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 22, 'lineno': 5, 'end_lineno': 5, 'col_offset': 14, 'end_col_offset': 85, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Overdue'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 22, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 85, 'type': 'Call1', 'code': "get_semester_asana(all_df, sem)['Overdue'].value_counts(normalize=True)"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 2, 'end_lineno': 2, 'col_offset': 28, 'end_col_offset': 82, 'type': 'Subscript1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') < 0]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 2, 'end_lineno': 2, 'col_offset': 28, 'end_col_offset': 99, 'type': 'Call1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') < 0]['Name'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 2, 'end_lineno': 2, 'col_offset': 35, 'end_col_offset': 77, 'type': 'Call1', 'code': "all_df['Overdue'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 3, 'end_lineno': 3, 'col_offset': 29, 'end_col_offset': 101, 'type': 'Call1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') == 0]['Name'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 3, 'end_lineno': 3, 'col_offset': 29, 'end_col_offset': 84, 'type': 'Subscript1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') == 0]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 3, 'end_lineno': 3, 'col_offset': 36, 'end_col_offset': 78, 'type': 'Call1', 'code': "all_df['Overdue'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 4, 'end_lineno': 4, 'col_offset': 29, 'end_col_offset': 100, 'type': 'Call1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') > 0]['Name'].dropna()"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 4, 'end_lineno': 4, 'col_offset': 29, 'end_col_offset': 83, 'type': 'Subscript1', 'code': "all_df[all_df['Overdue'].astype('timedelta64[D]') > 0]"}
{'notebook': 'college-summary.ipynb', 'cell_id': 23, 'lineno': 4, 'end_lineno': 4, 'col_offset': 36, 'end_col_offset': 78, 'type': 'Call1', 'code': "all_df['Overdue'].astype('timedelta64[D]')"}
{'notebook': 'college-summary.ipynb', 'cell_id': 26, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 58, 'type': 'Assign2', 'code': "exam_counts['date']  = pd.to_datetime(exam_counts['date'])"}
{'notebook': 'Models.ipynb', 'cell_id': 2, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Expr1', 'code': 'df_county_data'}
{'notebook': 'Models.ipynb', 'cell_id': 3, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': "state=df_county_data['State']"}
{'notebook': 'Models.ipynb', 'cell_id': 3, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 3, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 5, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 5, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 41, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Poverty Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 6, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 6, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 41, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Poverty Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 7, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 7, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 7, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 41, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Poverty Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 34, 'type': 'Assign1', 'code': 'x = df_county_data["Poverty Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 8, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'y = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 10, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 10, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'house_size = df_county_data["Household Size"]'}
{'notebook': 'Models.ipynb', 'cell_id': 11, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 11, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'house_size = df_county_data["Household Size"]'}
{'notebook': 'Models.ipynb', 'cell_id': 12, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 12, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 12, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 43, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Household Size"]'}
{'notebook': 'Models.ipynb', 'cell_id': 13, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 36, 'type': 'Assign1', 'code': 'x = df_county_data["Household Size"]'}
{'notebook': 'Models.ipynb', 'cell_id': 13, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'y = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 15, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 15, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign1', 'code': 'house_size = df_county_data["Unemployment Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 16, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign1', 'code': 'house_size = df_county_data["Unemployment Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 17, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 17, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 17, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Unemployment Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 18, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'x = df_county_data["Unemployment Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 18, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'y = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 20, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 20, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': 'house_size = df_county_data["Median Income"]'}
{'notebook': 'Models.ipynb', 'cell_id': 21, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 21, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': 'house_size = df_county_data["Median Income"]'}
{'notebook': 'Models.ipynb', 'cell_id': 22, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 22, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 22, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 42, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Median Income"]'}
{'notebook': 'Models.ipynb', 'cell_id': 23, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 35, 'type': 'Assign1', 'code': 'x = df_county_data["Median Income"]'}
{'notebook': 'Models.ipynb', 'cell_id': 23, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'y = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 25, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 25, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 66, 'type': 'Assign1', 'code': 'house_size = df_county_data["Speak a language other than English"]'}
{'notebook': 'Models.ipynb', 'cell_id': 26, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 26, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 66, 'type': 'Assign1', 'code': 'house_size = df_county_data["Speak a language other than English"]'}
{'notebook': 'Models.ipynb', 'cell_id': 27, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign1', 'code': 'grad_rate = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 27, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 38, 'type': 'Assign1', 'code': 'county = df_county_data["County Name"]'}
{'notebook': 'Models.ipynb', 'cell_id': 27, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 64, 'type': 'Assign1', 'code': 'pov_rate = df_county_data["Speak a language other than English"]'}
{'notebook': 'Models.ipynb', 'cell_id': 28, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 57, 'type': 'Assign1', 'code': 'x = df_county_data["Speak a language other than English"]'}
{'notebook': 'Models.ipynb', 'cell_id': 28, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'y = df_county_data["Graduation Rate"]'}
{'notebook': 'Models.ipynb', 'cell_id': 29, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 5, 'type': 'Expr1', 'code': 'lines'}
{'notebook': 'ml-live.ipynb', 'cell_id': 14, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': "tollrides = trips[trips['tolls_amount'] > 0]"}
{'notebook': 'ml-live.ipynb', 'cell_id': 14, 'lineno': 1, 'end_lineno': 1, 'col_offset': 12, 'end_col_offset': 44, 'type': 'Subscript1', 'code': "trips[trips['tolls_amount'] > 0]"}
{'notebook': 'ml-live.ipynb', 'cell_id': 14, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 64, 'type': 'Subscript1', 'code': "tollrides[tollrides['pickup_datetime'] == '2012-09-05 15:45:00']"}
{'notebook': 'ml-live.ipynb', 'cell_id': 16, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Call1', 'code': 'trips.describe()'}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 2, 'end_lineno': 2, 'col_offset': 10, 'end_col_offset': 34, 'type': 'Call1', 'code': 'trips_in.copy(deep=True)'}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 4, 'end_lineno': 4, 'col_offset': 2, 'end_col_offset': 27, 'type': 'Delete1', 'code': "del trips['tolls_amount']"}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 5, 'end_lineno': 5, 'col_offset': 2, 'end_col_offset': 27, 'type': 'Delete1', 'code': "del trips['total_amount']"}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 6, 'end_lineno': 6, 'col_offset': 2, 'end_col_offset': 28, 'type': 'Delete1', 'code': "del trips['trip_distance']"}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 7, 'end_lineno': 7, 'col_offset': 2, 'end_col_offset': 30, 'type': 'Delete1', 'code': "del trips['pickup_datetime']"}
{'notebook': 'ml-live.ipynb', 'cell_id': 18, 'lineno': 24, 'end_lineno': 24, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Call1', 'code': 'tripsqc.describe()'}
{'notebook': 'ml-live.ipynb', 'cell_id': 21, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'df_train = shuffled.iloc[:trainsize, :]'}
{'notebook': 'ml-live.ipynb', 'cell_id': 21, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 60, 'type': 'Assign1', 'code': 'df_valid = shuffled.iloc[trainsize:(trainsize+validsize), :]'}
{'notebook': 'ml-live.ipynb', 'cell_id': 22, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'df_train.describe()'}
{'notebook': 'ml-live.ipynb', 'cell_id': 23, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'df_valid.describe()'}
{'notebook': 'ml-live.ipynb', 'cell_id': 28, 'lineno': 10, 'end_lineno': 10, 'col_offset': 17, 'end_col_offset': 47, 'type': 'Call1', 'code': 'np.mean((actual-predicted)**2)'}
{'notebook': 'ml-live.ipynb', 'cell_id': 28, 'lineno': 22, 'end_lineno': 22, 'col_offset': 7, 'end_col_offset': 37, 'type': 'Call1', 'code': "df_train['fare_amount'].mean()"}
{'notebook': 'ml-live.ipynb', 'cell_id': 28, 'lineno': 22, 'end_lineno': 22, 'col_offset': 40, 'end_col_offset': 74, 'type': 'Call1', 'code': 'estimate_distance(df_train).mean()'}
{'notebook': 'ml-live.ipynb', 'cell_id': 31, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign1', 'code': 'FEATURES = CSV_COLUMNS[1:len(CSV_COLUMNS) - 1]'}
{'notebook': 'ml-live.ipynb', 'cell_id': 31, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 22, 'type': 'Assign1', 'code': 'LABEL = CSV_COLUMNS[0]'}
{'notebook': 'ml-live.ipynb', 'cell_id': 47, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Assign2', 'code': "os.environ['PROJECT'] = PROJECT"}
{'notebook': 'ml-live.ipynb', 'cell_id': 47, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign2', 'code': "os.environ['BUCKET'] = BUCKET"}
{'notebook': 'ml-live.ipynb', 'cell_id': 47, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign2', 'code': "os.environ['REGION'] = REGION"}
{'notebook': 'ml-live.ipynb', 'cell_id': 47, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Assign2', 'code': "os.environ['TFVERSION'] = '1.8'"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign2', 'code': "breeds['Breed'] = breeds['Breed'].str.strip()"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 58, 'type': 'Assign2', 'code': "data['OutcomeSubtype'] = data['OutcomeSubtype'].fillna('')"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 8, 'end_lineno': 8, 'col_offset': 25, 'end_col_offset': 58, 'type': 'Call1', 'code': "data['OutcomeSubtype'].fillna('')"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 51, 'type': 'Assign2', 'code': "data['Female'] = 'Female' in data['SexuponOutcome']"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 49, 'type': 'Call1', 'code': "data['AgeuponOutcome'].fillna('', inplace = True)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 33, 'end_lineno': 33, 'col_offset': 0, 'end_col_offset': 61, 'type': 'Assign2', 'code': "data['ConvertedAge']=data['AgeuponOutcome'].apply(ageConvert)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 33, 'end_lineno': 33, 'col_offset': 21, 'end_col_offset': 61, 'type': 'Call1', 'code': "data['AgeuponOutcome'].apply(ageConvert)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 42, 'end_lineno': 42, 'col_offset': 0, 'end_col_offset': 50, 'type': 'Assign2', 'code': "data['Female'] = data.SexuponOutcome.apply(female)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 42, 'end_lineno': 42, 'col_offset': 17, 'end_col_offset': 50, 'type': 'Call1', 'code': 'data.SexuponOutcome.apply(female)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 49, 'end_lineno': 49, 'col_offset': 0, 'end_col_offset': 50, 'type': 'Assign2', 'code': "data['Intact'] = data.SexuponOutcome.apply(intact)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 49, 'end_lineno': 49, 'col_offset': 17, 'end_col_offset': 50, 'type': 'Call1', 'code': 'data.SexuponOutcome.apply(intact)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 56, 'end_lineno': 56, 'col_offset': 0, 'end_col_offset': 50, 'type': 'Assign2', 'code': "data['MixedBreed'] = data.Breed.apply(mixed_breed)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 56, 'end_lineno': 56, 'col_offset': 21, 'end_col_offset': 50, 'type': 'Call1', 'code': 'data.Breed.apply(mixed_breed)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 64, 'end_lineno': 64, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign2', 'code': "data['TopBreed'] = data.Breed.apply(top_breed)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 64, 'end_lineno': 64, 'col_offset': 19, 'end_col_offset': 46, 'type': 'Call1', 'code': 'data.Breed.apply(top_breed)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 71, 'end_lineno': 71, 'col_offset': 29, 'end_col_offset': 64, 'type': 'Subscript1', 'code': "breeds.loc[breeds['Breed'] == word]"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 73, 'end_lineno': 73, 'col_offset': 15, 'end_col_offset': 29, 'type': 'Call1', 'code': 'np.mean(ranks)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 76, 'end_lineno': 76, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign2', 'code': "data['BreedRank'] = data.Breed.apply(breed_rank)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 76, 'end_lineno': 76, 'col_offset': 20, 'end_col_offset': 48, 'type': 'Call1', 'code': 'data.Breed.apply(breed_rank)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 82, 'end_lineno': 82, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign2', 'code': "data['PitBull'] = data.Breed.apply(pit_bull)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 82, 'end_lineno': 82, 'col_offset': 18, 'end_col_offset': 44, 'type': 'Call1', 'code': 'data.Breed.apply(pit_bull)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 88, 'end_lineno': 88, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign2', 'code': "data['BlackCat'] = data.Color.apply(black_cat)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 88, 'end_lineno': 88, 'col_offset': 19, 'end_col_offset': 46, 'type': 'Call1', 'code': 'data.Color.apply(black_cat)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 91, 'end_lineno': 91, 'col_offset': 7, 'end_col_offset': 19, 'type': 'Call1', 'code': 'pd.isnull(i)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 93, 'end_lineno': 93, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign2', 'code': "data['Named'] = data.Name.apply(naming)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 93, 'end_lineno': 93, 'col_offset': 16, 'end_col_offset': 39, 'type': 'Call1', 'code': 'data.Name.apply(naming)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 99, 'end_lineno': 99, 'col_offset': 29, 'end_col_offset': 48, 'type': 'Call1', 'code': 'i.replace(" ", "-")'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 100, 'end_lineno': 100, 'col_offset': 29, 'end_col_offset': 48, 'type': 'Call1', 'code': 'i.replace("/", " ")'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 106, 'end_lineno': 106, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign2', 'code': "data['OrderedColor'] = data.Color.apply(reorder)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 106, 'end_lineno': 106, 'col_offset': 23, 'end_col_offset': 48, 'type': 'Call1', 'code': 'data.Color.apply(reorder)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 107, 'end_lineno': 107, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign2', 'code': "data['OrderedBreed'] = data.Breed.apply(reorder)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 3, 'lineno': 107, 'end_lineno': 107, 'col_offset': 23, 'end_col_offset': 48, 'type': 'Call1', 'code': 'data.Breed.apply(reorder)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 19, 'end_lineno': 19, 'col_offset': 0, 'end_col_offset': 91, 'type': 'Assign2', 'code': 'data["ConvertedAge"] = data.groupby("AnimalType").transform(lambda x: x.fillna(x.median()))'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 19, 'end_lineno': 19, 'col_offset': 70, 'end_col_offset': 90, 'type': 'Call1', 'code': 'x.fillna(x.median())'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 20, 'end_lineno': 20, 'col_offset': 0, 'end_col_offset': 27, 'type': 'Call1', 'code': 'data[continuous].describe()'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 23, 'end_lineno': 23, 'col_offset': 8, 'end_col_offset': 91, 'type': 'Call1', 'code': 'pd.concat([data[target], data[continuous], pd.get_dummies(data[discrete])], axis=1)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 35, 'end_lineno': 35, 'col_offset': 0, 'end_col_offset': 21, 'type': 'Assign1', 'code': 'X = data2[predictors]'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 4, 'lineno': 36, 'end_lineno': 36, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Assign1', 'code': 'y = data2[[target]]'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 7, 'lineno': 2, 'end_lineno': 2, 'col_offset': 14, 'end_col_offset': 47, 'type': 'Call1', 'code': "data['AnimalType'].value_counts()"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 15, 'end_col_offset': 49, 'type': 'Call1', 'code': "data['OutcomeType'].value_counts()"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 14, 'lineno': 1, 'end_lineno': 1, 'col_offset': 15, 'end_col_offset': 41, 'type': 'Call1', 'code': 'data.OrderedBreed.unique()'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 14, 'lineno': 2, 'end_lineno': 2, 'col_offset': 25, 'end_col_offset': 57, 'type': 'Call1', 'code': 'data.OrderedBreed.value_counts()'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 16, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 74, 'type': 'Call2', 'code': "plt.xticks(range(len(corr.columns)), corr.columns,rotation='vertical')"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 16, 'lineno': 7, 'end_lineno': 7, 'col_offset': 21, 'end_col_offset': 38, 'type': 'Call2', 'code': 'len(corr.columns)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 16, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 54, 'type': 'Call2', 'code': 'plt.yticks(range(len(corr.columns)), corr.columns)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 16, 'lineno': 8, 'end_lineno': 8, 'col_offset': 21, 'end_col_offset': 38, 'type': 'Call2', 'code': 'len(corr.columns)'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': "data_dog = data[data['AnimalType'] == 'Dog']"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 2, 'end_lineno': 2, 'col_offset': 11, 'end_col_offset': 44, 'type': 'Subscript1', 'code': "data[data['AnimalType'] == 'Dog']"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 44, 'type': 'Assign1', 'code': "data_cat = data[data['AnimalType'] == 'Cat']"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 3, 'end_lineno': 3, 'col_offset': 11, 'end_col_offset': 44, 'type': 'Subscript1', 'code': "data[data['AnimalType'] == 'Cat']"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': "X_dog = data_dog[pred['dog']]"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': "X_cat = data_cat[pred['cat']]"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 26, 'type': 'Assign1', 'code': 'y_dog = data_dog[[target]]'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 25, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 26, 'type': 'Assign1', 'code': 'y_cat = data_cat[[target]]'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 26, 'lineno': 16, 'end_lineno': 16, 'col_offset': 8, 'end_col_offset': 27, 'type': 'Assign1', 'code': 'data = X[self.cols]'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 29, 'lineno': 3, 'end_lineno': 3, 'col_offset': 13, 'end_col_offset': 31, 'type': 'Call1', 'code': "cm.astype('float')"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 29, 'lineno': 17, 'end_lineno': 17, 'col_offset': 13, 'end_col_offset': 21, 'type': 'Call1', 'code': 'cm.max()'}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 36, 'lineno': 2, 'end_lineno': 2, 'col_offset': 18, 'end_col_offset': 59, 'type': 'Call1', 'code': "X_train_feature.drop('Intact_Unknown', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 36, 'lineno': 3, 'end_lineno': 3, 'col_offset': 18, 'end_col_offset': 59, 'type': 'Call1', 'code': "X_train_feature.drop('Female_Unknown', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 36, 'lineno': 5, 'end_lineno': 5, 'col_offset': 16, 'end_col_offset': 55, 'type': 'Call1', 'code': "X_dev_feature.drop('Intact_Unknown', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 36, 'lineno': 6, 'end_lineno': 6, 'col_offset': 16, 'end_col_offset': 55, 'type': 'Call1', 'code': "X_dev_feature.drop('Female_Unknown', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 39, 'lineno': 2, 'end_lineno': 2, 'col_offset': 14, 'end_col_offset': 55, 'type': 'Call1', 'code': "X_train_feature.drop('AnimalType_Dog', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 39, 'lineno': 4, 'end_lineno': 4, 'col_offset': 12, 'end_col_offset': 51, 'type': 'Call1', 'code': "X_dev_feature.drop('AnimalType_Dog', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 41, 'lineno': 2, 'end_lineno': 2, 'col_offset': 14, 'end_col_offset': 55, 'type': 'Call1', 'code': "X_train_feature.drop('AnimalType_Cat', 1)"}
{'notebook': 'hopper_miller_zhang_final0814.ipynb', 'cell_id': 41, 'lineno': 4, 'end_lineno': 4, 'col_offset': 12, 'end_col_offset': 51, 'type': 'Call1', 'code': "X_dev_feature.drop('AnimalType_Cat', 1)"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 6, 'end_lineno': 6, 'col_offset': 17, 'end_col_offset': 86, 'type': 'Call1', 'code': 'tourney_comp_ratings[tourney_comp_ratings.index.isin(X.index)].copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 6, 'end_lineno': 6, 'col_offset': 38, 'end_col_offset': 78, 'type': 'Call2', 'code': 'tourney_comp_ratings.index.isin(X.index)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 8, 'end_lineno': 8, 'col_offset': 4, 'end_col_offset': 48, 'type': 'Assign2', 'code': "test_games['predicted_result'] = predictions"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 44, 'type': 'Assign2', 'code': "test_games['pred_win_prob'] = pred_probs"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 10, 'end_lineno': 11, 'col_offset': 25, 'end_col_offset': 112, 'type': 'Call1', 'code': "test_games[test_games['game_result'] !=                                 test_games['predicted_result']].sort_values(by='pred_win_prob', ascending=False)"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 10, 'end_lineno': 11, 'col_offset': 25, 'end_col_offset': 63, 'type': 'Subscript1', 'code': "test_games[test_games['game_result'] !=                                 test_games['predicted_result']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 13, 'end_lineno': 13, 'col_offset': 4, 'end_col_offset': 134, 'type': 'Call1', 'code': "missed_predictions.apply(lambda x: feature_dictionary.print_game_info(test_games,x['season_t'], x['round'], x['team_t'] ), axis=1)"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 14, 'end_lineno': 16, 'col_offset': 26, 'end_col_offset': 110, 'type': 'Call1', 'code': 'missed_predictions.apply(lambda row: utils.get_supporting_features(row,                                                                                         feature_dictionary,                                                                                          feature_list),axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 18, 'end_lineno': 20, 'col_offset': 32, 'end_col_offset': 118, 'type': 'Call1', 'code': 'missed_predictions.apply(lambda row: utils.get_supporting_features(row,                                                                                                feature_dictionary,                                                                                               model_features),axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 28, 'end_lineno': 28, 'col_offset': 4, 'end_col_offset': 128, 'type': 'Assign2', 'code': "missed_predictions['features'] = 100 * missed_predictions['supporting_features'].apply(lambda x: len(x)) / len(feature_list)"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 28, 'end_lineno': 28, 'col_offset': 43, 'end_col_offset': 108, 'type': 'Call1', 'code': "missed_predictions['supporting_features'].apply(lambda x: len(x))"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 30, 'end_lineno': 31, 'col_offset': 4, 'end_col_offset': 27, 'type': 'Assign2', 'code': "missed_predictions['model_features'] = 100 * missed_predictions['supporting_model_features'].apply(lambda x: len(x)) / \\        len(model_features)"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 30, 'end_lineno': 30, 'col_offset': 49, 'end_col_offset': 120, 'type': 'Call1', 'code': "missed_predictions['supporting_model_features'].apply(lambda x: len(x))"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 0, 'lineno': 33, 'end_lineno': 33, 'col_offset': 4, 'end_col_offset': 63, 'type': 'Assign2', 'code': "missed_predictions['game_index'] = missed_predictions.index"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 1, 'lineno': 12, 'end_lineno': 12, 'col_offset': 4, 'end_col_offset': 53, 'type': 'Assign1', 'code': 'least_important_label = important_features[-1][0]'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 1, 'lineno': 23, 'end_lineno': 23, 'col_offset': 56, 'end_col_offset': 81, 'type': 'Call1', 'code': 'X.drop(columns=drop_list)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 1, 'lineno': 24, 'end_lineno': 24, 'col_offset': 8, 'end_col_offset': 57, 'type': 'Assign1', 'code': 'least_important_label = important_features[-1][0]'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 5, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'summary_data.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 33, 'type': 'Call1', 'code': "summary_data['season'].describe()"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 10, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 23, 'type': 'Call1', 'code': 'tourney_data.describe()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 11, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'tourney_data.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 12, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 86, 'type': 'Assign1', 'code': "computer_rankings = computer_rankings[computer_rankings['season'] >= start_tournament]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 12, 'lineno': 5, 'end_lineno': 5, 'col_offset': 20, 'end_col_offset': 86, 'type': 'Subscript1', 'code': "computer_rankings[computer_rankings['season'] >= start_tournament]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 12, 'lineno': 22, 'end_lineno': 22, 'col_offset': 0, 'end_col_offset': 41, 'type': 'Call1', 'code': 'tourney_comp_ratings.dropna(inplace=True)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 12, 'lineno': 23, 'end_lineno': 23, 'col_offset': 21, 'end_col_offset': 50, 'type': 'Call1', 'code': 'tourney_comp_ratings.isnull()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 13, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 27, 'type': 'Call1', 'code': 'tourney_comp_ratings.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 14, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 31, 'type': 'Call1', 'code': 'tourney_comp_ratings.describe()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 15, 'lineno': 12, 'end_lineno': 12, 'col_offset': 33, 'end_col_offset': 73, 'type': 'Call1', 'code': 'tourney_comp_ratings[item].astype(float)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 16, 'lineno': 2, 'end_lineno': 2, 'col_offset': 15, 'end_col_offset': 59, 'type': 'Call1', 'code': 'tourney_comp_ratings[feature_columns].copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 16, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'feature_data.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 17, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 59, 'type': 'Assign1', 'code': "X= feature_data[feature_data['season_t']<= stop_tournament]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 17, 'lineno': 1, 'end_lineno': 1, 'col_offset': 3, 'end_col_offset': 59, 'type': 'Subscript1', 'code': "feature_data[feature_data['season_t']<= stop_tournament]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 17, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 24, 'type': 'Call1', 'code': "X['season_t'].describe()"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 18, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 89, 'type': 'Assign1', 'code': "y=tourney_comp_ratings[tourney_comp_ratings['season_t']<= stop_tournament]['game_result']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 18, 'lineno': 1, 'end_lineno': 1, 'col_offset': 2, 'end_col_offset': 74, 'type': 'Subscript1', 'code': "tourney_comp_ratings[tourney_comp_ratings['season_t']<= stop_tournament]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 18, 'lineno': 2, 'end_lineno': 2, 'col_offset': 3, 'end_col_offset': 31, 'type': 'Call1', 'code': "X.drop(columns=['season_t'])"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 18, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 12, 'type': 'Expr1', 'code': 'feature_list'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 2, 'end_lineno': 2, 'col_offset': 10, 'end_col_offset': 24, 'type': 'Call1', 'code': 'X_train.copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 3, 'end_lineno': 3, 'col_offset': 9, 'end_col_offset': 22, 'type': 'Call1', 'code': 'X_test.copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call2', 'code': 'print(X_train.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call2', 'code': 'print(y_train.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call2', 'code': 'print(X_test.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call2', 'code': 'print(y_test.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 19, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Call1', 'code': 'X_train.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 22, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Call1', 'code': 'X_train.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 30, 'lineno': 1, 'end_lineno': 1, 'col_offset': 9, 'end_col_offset': 17, 'type': 'Call1', 'code': 'X.copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 30, 'lineno': 17, 'end_lineno': 17, 'col_offset': 13, 'end_col_offset': 42, 'type': 'Call1', 'code': 'np.mean(train_scores, axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 30, 'lineno': 18, 'end_lineno': 18, 'col_offset': 12, 'end_col_offset': 40, 'type': 'Call1', 'code': 'np.std(train_scores, axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 30, 'lineno': 21, 'end_lineno': 21, 'col_offset': 12, 'end_col_offset': 40, 'type': 'Call1', 'code': 'np.mean(test_scores, axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 30, 'lineno': 22, 'end_lineno': 22, 'col_offset': 11, 'end_col_offset': 38, 'type': 'Call1', 'code': 'np.std(test_scores, axis=1)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 31, 'lineno': 2, 'end_lineno': 2, 'col_offset': 6, 'end_col_offset': 19, 'type': 'Call1', 'code': 'scores.mean()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 34, 'lineno': 5, 'end_lineno': 5, 'col_offset': 4, 'end_col_offset': 32, 'type': 'Assign1', 'code': "accuracy = value['accuracy']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 34, 'lineno': 6, 'end_lineno': 6, 'col_offset': 4, 'end_col_offset': 41, 'type': 'Assign1', 'code': "cross_val = value['cross_validation']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 34, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 36, 'type': 'Assign1', 'code': "log_loss_val = value['log_loss']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 35, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 49, 'type': 'Assign1', 'code': "model_features =model_stats[cross_hash]['labels']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 36, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 22, 'type': 'Expr1', 'code': 'numeric_model_features'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 37, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Expr1', 'code': 'dropped_features'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 1, 'end_lineno': 1, 'col_offset': 10, 'end_col_offset': 34, 'type': 'Call1', 'code': 'X[model_features].copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 3, 'end_lineno': 3, 'col_offset': 10, 'end_col_offset': 24, 'type': 'Call1', 'code': 'X_train.copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 4, 'end_lineno': 4, 'col_offset': 9, 'end_col_offset': 22, 'type': 'Call1', 'code': 'X_test.copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call2', 'code': 'print(X_train.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call2', 'code': 'print(y_train.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call2', 'code': 'print(X_test.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call2', 'code': 'print(y_test.shape)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 38, 'lineno': 21, 'end_lineno': 21, 'col_offset': 27, 'end_col_offset': 50, 'type': 'Call1', 'code': 'cross_val_scores.mean()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 40, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Expr1', 'code': 'missed_predictions'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 41, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 91, 'type': 'Assign1', 'code': "plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 43, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 57, 'type': 'Subscript1', 'code': "missed_predictions[missed_predictions['game_index']==201]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 45, 'lineno': 4, 'end_lineno': 4, 'col_offset': 15, 'end_col_offset': 66, 'type': 'Subscript1', 'code': "feature_data[feature_data['season_t'] == test_year]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 45, 'lineno': 4, 'end_lineno': 4, 'col_offset': 15, 'end_col_offset': 73, 'type': 'Call1', 'code': "feature_data[feature_data['season_t'] == test_year].copy()"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 45, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'feature_copy.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 46, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 19, 'type': 'Call1', 'code': 'feature_copy.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 47, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign1', 'code': 'X_season = feature_copy[model_features]'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 47, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 92, 'type': 'Assign1', 'code': "y_season = tourney_comp_ratings[tourney_comp_ratings['season_t']== test_year]['game_result']"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 47, 'lineno': 3, 'end_lineno': 3, 'col_offset': 11, 'end_col_offset': 77, 'type': 'Subscript1', 'code': "tourney_comp_ratings[tourney_comp_ratings['season_t']== test_year]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 47, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 14, 'type': 'Expr3', 'code': 'X_season.shape'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 51, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 18, 'type': 'Expr1', 'code': 'missed_predictions'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 52, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 91, 'type': 'Assign1', 'code': "plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 53, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 58, 'type': 'Subscript1', 'code': "missed_predictions[missed_predictions['game_index']==1024]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 54, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 15, 'type': 'Expr1', 'code': 'log_loss_result'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 57, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Expr1', 'code': 'y_pred_season'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 58, 'lineno': 1, 'end_lineno': 1, 'col_offset': 16, 'end_col_offset': 92, 'type': 'Call1', 'code': 'tourney_comp_ratings[tourney_comp_ratings.index.isin(X_season.index)].copy()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 58, 'lineno': 1, 'end_lineno': 1, 'col_offset': 37, 'end_col_offset': 84, 'type': 'Call2', 'code': 'tourney_comp_ratings.index.isin(X_season.index)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 58, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Expr1', 'code': 'tourney_games'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 59, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 42, 'type': 'Assign2', 'code': "tourney_games['predicted'] = y_pred_season"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 59, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 20, 'type': 'Call1', 'code': 'tourney_games.head()'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 60, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 57, 'type': 'Assign1', 'code': 'predictions_counter_seed = tourney_games[cond_1 | cond_2]'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 60, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 118, 'type': 'Expr2', 'code': "predictions_counter_seed[['round','seed_t','team_t','seed_o','team_o','game_result','predicted','win_pts','lose_pts']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 61, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 135, 'type': 'Assign1', 'code': "correct_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result']== predictions_counter_seed['predicted']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 61, 'lineno': 2, 'end_lineno': 2, 'col_offset': 30, 'end_col_offset': 135, 'type': 'Subscript1', 'code': "predictions_counter_seed[predictions_counter_seed['game_result']== predictions_counter_seed['predicted']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 61, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 121, 'type': 'Expr2', 'code': "correct_counter_predictions[['round','seed_t','team_t','seed_o','team_o','game_result','predicted','win_pts','lose_pts']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 62, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 134, 'type': 'Assign1', 'code': "wrong_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result'] != predictions_counter_seed['predicted']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 62, 'lineno': 2, 'end_lineno': 2, 'col_offset': 28, 'end_col_offset': 134, 'type': 'Subscript1', 'code': "predictions_counter_seed[predictions_counter_seed['game_result'] != predictions_counter_seed['predicted']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 62, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 119, 'type': 'Expr2', 'code': "wrong_counter_predictions[['round','seed_t','team_t','seed_o','team_o','game_result','predicted','win_pts','lose_pts']]"}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 63, 'lineno': 1, 'end_lineno': 1, 'col_offset': 46, 'end_col_offset': 81, 'type': 'Call2', 'code': 'len(predictions_counter_seed.index)'}
{'notebook': 'Tournament_Model_LR-Delta_No_Opp_Stats.ipynb', 'cell_id': 63, 'lineno': 2, 'end_lineno': 2, 'col_offset': 54, 'end_col_offset': 92, 'type': 'Call2', 'code': 'len(correct_counter_predictions.index)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 0, 'lineno': 2, 'end_lineno': 2, 'col_offset': 11, 'end_col_offset': 29, 'type': 'Call1', 'code': 'sessions.fillna(0)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 0, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 48, 'type': 'Assign2', 'code': "sessions['date'] = pd.to_datetime(sessions.date)"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 1, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Expr3', 'code': 'sessions.columns'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 1, 'end_lineno': 1, 'col_offset': 9, 'end_col_offset': 43, 'type': 'Call1', 'code': 'sessions.apply(calc_score, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 2, 'end_lineno': 2, 'col_offset': 19, 'end_col_offset': 64, 'type': 'Call1', 'code': 'sessions.apply(calc_hangboard_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 3, 'end_lineno': 3, 'col_offset': 13, 'end_col_offset': 52, 'type': 'Call1', 'code': 'sessions.apply(calc_gym_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 4, 'end_lineno': 4, 'col_offset': 18, 'end_col_offset': 62, 'type': 'Call1', 'code': 'sessions.apply(calc_climbing_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 5, 'end_lineno': 5, 'col_offset': 13, 'end_col_offset': 52, 'type': 'Call1', 'code': 'sessions.apply(calc_arc_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 6, 'end_lineno': 6, 'col_offset': 14, 'end_col_offset': 59, 'type': 'Call1', 'code': 'sessions.apply(calc_technique_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 7, 'end_lineno': 7, 'col_offset': 15, 'end_col_offset': 56, 'type': 'Call1', 'code': 'sessions.apply(calc_power_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 8, 'end_lineno': 8, 'col_offset': 14, 'end_col_offset': 54, 'type': 'Call1', 'code': 'sessions.apply(calc_yoga_scores, axis=1)'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 27, 'type': 'Assign2', 'code': "sessions['scores'] = scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 42, 'type': 'Assign2', 'code': "sessions['hang_scores'] = hangboard_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 12, 'end_lineno': 12, 'col_offset': 0, 'end_col_offset': 35, 'type': 'Assign2', 'code': "sessions['gym_scores'] = gym_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 13, 'end_lineno': 13, 'col_offset': 0, 'end_col_offset': 45, 'type': 'Assign2', 'code': "sessions['climbing_scores'] = climbing_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 14, 'end_lineno': 14, 'col_offset': 0, 'end_col_offset': 35, 'type': 'Assign2', 'code': "sessions['arc_scores'] = arc_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 15, 'end_lineno': 15, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign2', 'code': "sessions['tech_scores'] = tech_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 16, 'end_lineno': 16, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Assign2', 'code': "sessions['power_scores'] = power_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 3, 'lineno': 17, 'end_lineno': 17, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign2', 'code': "sessions['yoga_scores'] = yoga_scores"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 4, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 46, 'type': 'Assign1', 'code': "doripa = sessions[sessions.monkey == 'doripa']"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 4, 'lineno': 1, 'end_lineno': 1, 'col_offset': 9, 'end_col_offset': 46, 'type': 'Subscript1', 'code': "sessions[sessions.monkey == 'doripa']"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 4, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 59, 'type': 'Assign1', 'code': "sunshine_sessions = sessions[sessions.monkey == 'sunshine']"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 4, 'lineno': 2, 'end_lineno': 2, 'col_offset': 20, 'end_col_offset': 59, 'type': 'Subscript1', 'code': "sessions[sessions.monkey == 'sunshine']"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 6, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 13, 'type': 'Call1', 'code': 'doripa.tail()'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 6, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 92, 'type': 'Expr2', 'code': "doripa.tail()[['climbing_scores', 'tech_scores', 'gym_scores', 'hang_scores', 'arc_scores']]"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 8, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 91, 'type': 'Call1', 'code': "doripa[['climbing_scores', 'tech_scores', 'gym_scores', 'hang_scores', 'arc_scores']].max()"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 10, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 24, 'type': 'Call1', 'code': 'sunshine_sessions.tail()'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 10, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 103, 'type': 'Expr2', 'code': "sunshine_sessions.tail()[['climbing_scores', 'tech_scores', 'gym_scores', 'hang_scores', 'arc_scores']]"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 12, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 102, 'type': 'Call1', 'code': "sunshine_sessions[['climbing_scores', 'tech_scores', 'gym_scores', 'hang_scores', 'arc_scores']].max()"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 6, 'end_lineno': 6, 'col_offset': 4, 'end_col_offset': 35, 'type': 'Assign2', 'code': "athlete['additional_index'] = x"}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 55, 'end_lineno': 55, 'col_offset': 4, 'end_col_offset': 51, 'type': 'Assign1', 'code': 'athlete_hang_scores = athlete[athlete.hang > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 55, 'end_lineno': 55, 'col_offset': 26, 'end_col_offset': 51, 'type': 'Subscript1', 'code': 'athlete[athlete.hang > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 56, 'end_lineno': 56, 'col_offset': 4, 'end_col_offset': 57, 'type': 'Assign1', 'code': 'athelete_gym_scores = athlete[athlete.gym_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 56, 'end_lineno': 56, 'col_offset': 26, 'end_col_offset': 57, 'type': 'Subscript1', 'code': 'athlete[athlete.gym_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 57, 'end_lineno': 57, 'col_offset': 4, 'end_col_offset': 66, 'type': 'Assign1', 'code': 'athlete_climbing_scores = athlete[athlete.climbing_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 57, 'end_lineno': 57, 'col_offset': 30, 'end_col_offset': 66, 'type': 'Subscript1', 'code': 'athlete[athlete.climbing_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 58, 'end_lineno': 58, 'col_offset': 4, 'end_col_offset': 58, 'type': 'Assign1', 'code': 'athlete_tech_scores = athlete[athlete.tech_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 13, 'lineno': 58, 'end_lineno': 58, 'col_offset': 26, 'end_col_offset': 58, 'type': 'Subscript1', 'code': 'athlete[athlete.tech_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 2, 'end_lineno': 2, 'col_offset': 4, 'end_col_offset': 29, 'type': 'Subscript1', 'code': 'doripa[doripa.scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 3, 'end_lineno': 3, 'col_offset': 4, 'end_col_offset': 38, 'type': 'Subscript1', 'code': 'doripa[doripa.climbing_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 5, 'end_lineno': 5, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'doripa[doripa.tech_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 6, 'end_lineno': 6, 'col_offset': 4, 'end_col_offset': 33, 'type': 'Subscript1', 'code': 'doripa[doripa.gym_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 33, 'type': 'Subscript1', 'code': 'doripa[doripa.arc_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 17, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 34, 'type': 'Subscript1', 'code': 'doripa[doripa.hang_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 2, 'end_lineno': 2, 'col_offset': 4, 'end_col_offset': 51, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 3, 'end_lineno': 3, 'col_offset': 4, 'end_col_offset': 60, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.climbing_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 5, 'end_lineno': 5, 'col_offset': 4, 'end_col_offset': 56, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.tech_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 6, 'end_lineno': 6, 'col_offset': 4, 'end_col_offset': 55, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.gym_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 55, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.arc_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 20, 'lineno': 9, 'end_lineno': 9, 'col_offset': 4, 'end_col_offset': 56, 'type': 'Subscript1', 'code': 'sunshine_sessions[sunshine_sessions.hang_scores > 0]'}
{'notebook': 'Sessions Analysis.ipynb', 'cell_id': 27, 'lineno': 1, 'end_lineno': 1, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Call1', 'code': "doripa.corr()['scores'].sort_values()"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 1, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 39, 'type': 'Subscript1', 'code': "teams_all[teams_all.name== 'Boise St.']"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 3, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 9, 'type': 'Expr1', 'code': 'games_all'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 4, 'lineno': 14, 'end_lineno': 14, 'col_offset': 4, 'end_col_offset': 24, 'type': 'Assign2', 'code': "fts['value'] = value"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 4, 'lineno': 15, 'end_lineno': 15, 'col_offset': 4, 'end_col_offset': 62, 'type': 'Assign1', 'code': 'fts = fts[(fts.name_1.notnull()) & (fts.name_2.notnull())]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 4, 'lineno': 22, 'end_lineno': 22, 'col_offset': 17, 'end_col_offset': 52, 'type': 'Call1', 'code': 'pd.concat([features_1, features_2])'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 4, 'lineno': 23, 'end_lineno': 23, 'col_offset': 0, 'end_col_offset': 85, 'type': 'Call1', 'code': "features_total.drop(['team1','team2','year','name_1','name_2'], inplace=True, axis=1)"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 4, 'lineno': 28, 'end_lineno': 28, 'col_offset': 0, 'end_col_offset': 37, 'type': 'Assign1', 'code': 'features_total = features_total[cols]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 5, 'lineno': 3, 'end_lineno': 3, 'col_offset': 4, 'end_col_offset': 64, 'type': 'Assign1', 'code': 't_A_fts = teams[(teams.name==team_a) & (teams.year == year)]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 5, 'lineno': 4, 'end_lineno': 4, 'col_offset': 4, 'end_col_offset': 64, 'type': 'Assign1', 'code': 't_B_fts = teams[(teams.name==team_b) & (teams.year == year)]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 5, 'lineno': 7, 'end_lineno': 7, 'col_offset': 4, 'end_col_offset': 62, 'type': 'Call1', 'code': "fts.drop(['name_1','name_2','year'], inplace=True, axis=1)"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 5, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 2, 'type': 'Expr1', 'code': 'fs'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 30, 'end_lineno': 30, 'col_offset': 12, 'end_col_offset': 58, 'type': 'Assign1', 'code': "teams.ix[teams.name==team[0],'name'] = team[1]"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 40, 'end_lineno': 40, 'col_offset': 8, 'end_col_offset': 19, 'type': 'Assign1', 'code': 'temp = t[0]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 41, 'end_lineno': 41, 'col_offset': 8, 'end_col_offset': 19, 'type': 'Assign1', 'code': 't[0] = t[1]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 49, 'end_lineno': 49, 'col_offset': 39, 'end_col_offset': 74, 'type': 'Subscript1', 'code': 'kag_seeds[kag_seeds.season==season]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 54, 'end_lineno': 54, 'col_offset': 27, 'end_col_offset': 50, 'type': 'Subscript1', 'code': 'teams[teams.year==year]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 60, 'end_lineno': 60, 'col_offset': 4, 'end_col_offset': 71, 'type': 'Assign1', 'code': "wt = kag_results.ix[kag_results.season==season, ['wteam', 'lteam']]"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 7, 'lineno': 61, 'end_lineno': 61, 'col_offset': 4, 'end_col_offset': 50, 'type': 'Assign2', 'code': "wt['result'] = [checker(t) for t in wt.values]"}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 10, 'lineno': 4, 'end_lineno': 4, 'col_offset': 4, 'end_col_offset': 40, 'type': 'Assign1', 'code': 'res = results[results.res.notnull()]'}
{'notebook': 'DataAccessExamples.ipynb', 'cell_id': 11, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 2, 'type': 'Expr1', 'code': 'll'}
{'notebook': 'Clustering.ipynb', 'cell_id': 0, 'lineno': 13, 'end_lineno': 13, 'col_offset': 0, 'end_col_offset': 140, 'type': 'Assign2', 'code': 'df["DayDiff"] = DataFrame([get_datetime(val) for val in df["Checkin Date"]]) - DataFrame([get_datetime(val) for val in df["Snapshot Date"]])'}
{'notebook': 'Clustering.ipynb', 'cell_id': 0, 'lineno': 14, 'end_lineno': 14, 'col_offset': 0, 'end_col_offset': 86, 'type': 'Assign2', 'code': 'df["WeekDay"] = DataFrame([get_datetime(val).weekday() for val in df["Checkin Date"]])'}
{'notebook': 'Clustering.ipynb', 'cell_id': 0, 'lineno': 15, 'end_lineno': 15, 'col_offset': 0, 'end_col_offset': 64, 'type': 'Assign2', 'code': 'df["DiscountDiff"] = df["Original Price"] - df["Discount Price"]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 0, 'lineno': 16, 'end_lineno': 16, 'col_offset': 0, 'end_col_offset': 68, 'type': 'Assign2', 'code': 'df["DiscountPerc"] = (df["DiscountDiff"]/df["Original Price"]) * 100'}
{'notebook': 'Clustering.ipynb', 'cell_id': 0, 'lineno': 18, 'end_lineno': 18, 'col_offset': 0, 'end_col_offset': 2, 'type': 'Expr1', 'code': 'df'}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 77, 'type': 'Assign2', 'code': 'df["Hotel_Count"] = df.groupby(\'Hotel Name\')[\'Hotel Name\'].transform(\'count\')'}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 3, 'end_lineno': 3, 'col_offset': 20, 'end_col_offset': 84, 'type': 'Call1', 'code': "df.sort_values(by=['Hotel_Count'],ascending=False).reset_index()"}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 3, 'end_lineno': 3, 'col_offset': 20, 'end_col_offset': 70, 'type': 'Call1', 'code': "df.sort_values(by=['Hotel_Count'],ascending=False)"}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 58, 'type': 'Assign1', 'code': 'df_hotels = descending_hotels["Hotel Name"].unique()[:150]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 6, 'end_lineno': 6, 'col_offset': 12, 'end_col_offset': 52, 'type': 'Call1', 'code': 'descending_hotels["Hotel Name"].unique()'}
{'notebook': 'Clustering.ipynb', 'cell_id': 2, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 87, 'type': 'Assign1', 'code': "most_common_hotels = descending_hotels[descending_hotels['Hotel Name'].isin(df_hotels)]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 115, 'type': 'Assign2', 'code': 'most_common_hotels["Checkin_Count"] = most_common_hotels.groupby(\'Checkin Date\')[\'Checkin Date\'].transform(\'count\')'}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 3, 'end_lineno': 3, 'col_offset': 32, 'end_col_offset': 100, 'type': 'Call1', 'code': "most_common_hotels.sort_values(by=['Checkin_Count'],ascending=False)"}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 3, 'end_lineno': 3, 'col_offset': 32, 'end_col_offset': 114, 'type': 'Call1', 'code': "most_common_hotels.sort_values(by=['Checkin_Count'],ascending=False).reset_index()"}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 6, 'end_lineno': 6, 'col_offset': 0, 'end_col_offset': 82, 'type': 'Assign1', 'code': 'common_checkins_list = descending_most_common_hotels["Checkin Date"].unique()[:40]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 6, 'end_lineno': 6, 'col_offset': 23, 'end_col_offset': 77, 'type': 'Call1', 'code': 'descending_most_common_hotels["Checkin Date"].unique()'}
{'notebook': 'Clustering.ipynb', 'cell_id': 4, 'lineno': 7, 'end_lineno': 7, 'col_offset': 0, 'end_col_offset': 119, 'type': 'Assign1', 'code': "most_checkins = descending_most_common_hotels[descending_most_common_hotels['Checkin Date'].isin(common_checkins_list)]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 6, 'lineno': 1, 'end_lineno': 1, 'col_offset': 22, 'end_col_offset': 58, 'type': 'Call1', 'code': 'most_checkins["Hotel Name"].unique()'}
{'notebook': 'Clustering.ipynb', 'cell_id': 6, 'lineno': 2, 'end_lineno': 2, 'col_offset': 19, 'end_col_offset': 57, 'type': 'Call1', 'code': 'most_checkins["Checkin Date"].unique()'}
{'notebook': 'Clustering.ipynb', 'cell_id': 8, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 136, 'type': 'Assign2', 'code': 'most_checkins["Discount Price"]= most_checkins.groupby([\'Hotel Name\',\'Checkin Date\',\'Discount Code\'])["Discount Price"].transform(\'min\')'}
{'notebook': 'Clustering.ipynb', 'cell_id': 8, 'lineno': 3, 'end_lineno': 3, 'col_offset': 0, 'end_col_offset': 97, 'type': 'Call1', 'code': 'most_checkins.drop_duplicates(subset=["Hotel Name","Checkin Date","Discount Code"], inplace=True)'}
{'notebook': 'Clustering.ipynb', 'cell_id': 8, 'lineno': 4, 'end_lineno': 4, 'col_offset': 0, 'end_col_offset': 103, 'type': 'Call1', 'code': 'most_checkins.sort_values(by=["Hotel Name","Checkin Date","Discount Code"],ascending=True,inplace=True)'}
{'notebook': 'Clustering.ipynb', 'cell_id': 8, 'lineno': 5, 'end_lineno': 5, 'col_offset': 0, 'end_col_offset': 70, 'type': 'Call1', 'code': "most_checkins['Discount Price'].replace(sys.maxsize, -1, inplace=True)"}
{'notebook': 'Clustering.ipynb', 'cell_id': 8, 'lineno': 8, 'end_lineno': 8, 'col_offset': 25, 'end_col_offset': 116, 'type': 'Call1', 'code': 'most_checkins[["Hotel Name","Checkin Date","Discount Code","Discount Price"]].reset_index()'}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 2, 'end_lineno': 2, 'col_offset': 0, 'end_col_offset': 90, 'type': 'Assign1', 'code': "discount_filtered = checkin_hotel_discount[checkin_hotel_discount['Discount Price'] > -1 ]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 2, 'end_lineno': 2, 'col_offset': 20, 'end_col_offset': 90, 'type': 'Subscript1', 'code': "checkin_hotel_discount[checkin_hotel_discount['Discount Price'] > -1 ]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 85, 'type': 'Assign1', 'code': "discount_filtered_grouped = discount_filtered.groupby('Hotel Name')['Discount Price']"}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 12, 'end_lineno': 12, 'col_offset': 0, 'end_col_offset': 81, 'type': 'Assign2', 'code': 'discount_filtered["Normal"] = discount_filtered_grouped.transform(normalize_data)'}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 14, 'end_lineno': 14, 'col_offset': 0, 'end_col_offset': 88, 'type': 'Assign1', 'code': "discount_synth = checkin_hotel_discount[checkin_hotel_discount['Discount Price'] == -1 ]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 14, 'end_lineno': 14, 'col_offset': 17, 'end_col_offset': 88, 'type': 'Subscript1', 'code': "checkin_hotel_discount[checkin_hotel_discount['Discount Price'] == -1 ]"}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 15, 'end_lineno': 15, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign2', 'code': 'discount_synth["Normal"] = -1'}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 19, 'end_lineno': 19, 'col_offset': 0, 'end_col_offset': 106, 'type': 'Call1', 'code': 'normal_dataFrame.sort_values(by=["Hotel Name","Checkin Date","Discount Code"],ascending=True,inplace=True)'}
{'notebook': 'Clustering.ipynb', 'cell_id': 10, 'lineno': 20, 'end_lineno': 20, 'col_offset': 0, 'end_col_offset': 16, 'type': 'Expr1', 'code': 'normal_dataFrame'}
{'notebook': 'Clustering.ipynb', 'cell_id': 14, 'lineno': 8, 'end_lineno': 8, 'col_offset': 0, 'end_col_offset': 27, 'type': 'Assign1', 'code': 'labels = vector.values[:,0]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 14, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 29, 'type': 'Assign1', 'code': 'data = vector.values[:,1:160]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 16, 'lineno': 9, 'end_lineno': 9, 'col_offset': 0, 'end_col_offset': 28, 'type': 'Assign2', 'code': 'hotels["cluster"] = clusters'}
{'notebook': 'Clustering.ipynb', 'cell_id': 16, 'lineno': 10, 'end_lineno': 10, 'col_offset': 0, 'end_col_offset': 30, 'type': 'Assign1', 'code': 'hotels = hotels[[0,"cluster"]]'}
{'notebook': 'Clustering.ipynb', 'cell_id': 16, 'lineno': 11, 'end_lineno': 11, 'col_offset': 0, 'end_col_offset': 62, 'type': 'Call1', 'code': 'hotels.sort_values(by=["cluster"],ascending=True,inplace=True)'}
{'notebook': 'Clustering.ipynb', 'cell_id': 16, 'lineno': 13, 'end_lineno': 13, 'col_offset': 0, 'end_col_offset': 65, 'type': 'Assign2', 'code': 'hotels["Count"] = hotels.groupby("cluster")[0].transform("count")'}
{'notebook': 'Clustering.ipynb', 'cell_id': 16, 'lineno': 14, 'end_lineno': 14, 'col_offset': 0, 'end_col_offset': 6, 'type': 'Expr1', 'code': 'hotels'}
