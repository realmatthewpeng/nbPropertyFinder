samples_percentage['Total'] = samples_percentage.sum(axis=1)
samples_w_total['Total'] = samples_w_total.sum(axis=1)
samples_w_total = samples.copy()
samples_percentage = samples.loc[:,"Fresh":"Delicatessen"].div(samples_w_total['Total'], axis=0) * 100
score = regressor.score(X_test, y_test)
X_train, X_test, y_train, y_test = train_test_split(X_all, y_all, test_size=0.25, random_state=10)
y_all = data[column_to_study]
X_all = new_data.drop(column_to_study, axis=1)
regressor = regressor.fit(X_train, y_train)
new_data = data.copy()
regressor = DecisionTreeRegressor(random_state=10)
log_data = np.log(data)
log_samples = np.log(samples)
pca_samples = pca.transform(log_samples)
pca_results = rs.pca_results(good_data, pca)
pca = PCA(n_components=6)
pca = pca.fit(good_data)
reduced_data = pca.transform(good_data)
pca = PCA(n_components=2)
pca = pca.fit(good_data)
reduced_data = pd.DataFrame(reduced_data, columns = ['Dimension 1', 'Dimension 2'])
pca_samples = pca.transform(log_samples)
score = silhouette_score(reduced_data, preds)
clusterer = KMeans(n_clusters=n_clusters, random_state=10)
preds = clusterer.predict(reduced_data)
centers = clusterer.cluster_centers_
clusterer = clusterer.fit(reduced_data)
sample_preds = clusterer.predict(pca_samples)
true_centers = np.exp(log_centers)
true_centers = pd.DataFrame(np.round(true_centers), columns = data.keys())
true_centers.index = segments
log_centers = pca.inverse_transform(centers)
df_diffs = (np.abs(samples-true_centers.iloc[0]) < np.abs(samples-true_centers.iloc[1])).applymap(lambda x: 0 if x else 1)
df_preds = pd.concat([df_diffs, pd.Series(sample_preds, name='PREDICTION')], axis=1)