computer_rankings = computer_rankings[computer_rankings['season'] >= start_tournament]
tourney_comp_ratings[item] = tourney_comp_ratings[item].astype(float)
X= feature_data[feature_data['season_t']<= stop_tournament]
y=tourney_comp_ratings[tourney_comp_ratings['season_t']<= stop_tournament]['game_result']
X= X.drop(columns=['season_t'])
X_copy = X.copy()
X_copy[numeric_features] = scaler.transform(X_copy[numeric_features])
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)
X_train = X_train.copy()
X_test = X_test.copy()
plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]
feature_copy = feature_data[feature_data['season_t'] == test_year].copy()
X_season = feature_copy[model_features]
y_season = tourney_comp_ratings[tourney_comp_ratings['season_t']== test_year]['game_result']
tourney_games = tourney_comp_ratings[tourney_comp_ratings.index.isin(X_season.index)].copy()
tourney_games['predicted'] = y_pred_season
predictions_counter_seed = tourney_games[cond_1 | cond_2]
correct_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result']== predictions_counter_seed['predicted']]
wrong_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result'] != predictions_counter_seed['predicted']]
missed_predictions = test_games[test_games['game_result'] !=test_games['predicted_result']].sort_values(by='pred_win_prob', ascending=False)
test_games = tourney_comp_ratings[tourney_comp_ratings.index.isin(X.index)].copy()
missed_predictions['game_index'] = missed_predictions.index
feature_data = tourney_comp_ratings[feature_columns].copy()
X_test = X_test.copy()
X_model = X[model_features].copy()
X_train = X_train.copy()
plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]
test_games['predicted_result'] = predictions
test_games['pred_win_prob'] = pred_probs
missed_predictions['features'] = 100 * missed_predictions['supporting_features'].apply(lambda x: len(x)) / len(feature_list)
missed_predictions['model_features'] = 100 * missed_predictions['supporting_model_features'].apply(lambda x: len(x)) / \len(model_features)
supporting_model_features = missed_predictions.apply(lambda row: utils.get_supporting_features(row,feature_dictionary,model_features),axis=1)
supporting_features = missed_predictions.apply(lambda row: utils.get_supporting_features(row,feature_dictionary,feature_list),axis=1)