missed_predictions = missed_predictions.merge(supporting_features.to_frame(name='supporting_features'),how='left',left_index=True, right_index=True)
missed_predictions['model_features'] = 100 * missed_predictions['supporting_model_features'].apply(lambda x: len(x)) / \len(model_features)
missed_predictions['game_index'] = missed_predictions.index
missed_predictions = missed_predictions.merge(supporting_model_features.to_frame(name='supporting_model_features'),how='left',left_index=True, right_index=True)
supporting_features = missed_predictions.apply(lambda row: utils.get_supporting_features(row,feature_dictionary,feature_list),axis=1)
pred_probs = pd.Series(prediction_probabilities[:,1], index=X.index)
test_games[numeric_feature_to_scale] = scaler.inverse_transform(test_games[numeric_feature_to_scale])
missed_predictions = test_games[test_games['game_result'] !=test_games['predicted_result']].sort_values(by='pred_win_prob', ascending=False)
missed_predictions['features'] = 100 * missed_predictions['supporting_features'].apply(lambda x: len(x)) / len(feature_list)
supporting_model_features = missed_predictions.apply(lambda row: utils.get_supporting_features(row,feature_dictionary,model_features),axis=1)
test_games['pred_win_prob'] = pred_probs
predictions = pd.Series(y_pred, index=y.index)
test_games = tourney_comp_ratings[tourney_comp_ratings.index.isin(X.index)].copy()
test_games['predicted_result'] = predictions
summary_data = file_utils.read_summary_team_data(summary_team_file)
teams = file_utils.read_team_meta_data(team_meta_data_file)
tourney_data = file_utils.read_tournament_results(tournament_data_file,start_tournament)
computer_rankings = computer_rankings[computer_rankings['season'] >= start_tournament]
computer_rankings = pd.read_csv(Path(rankings_data_file))
tourney_data = file_utils.join_tourney_team_data(tourney_data, teams)
tourney_comp_ratings = utils.implement_top_conference_feature(game_data, tourney_comp_ratings)
tourney_comp_ratings = utils.compute_delta_features(tourney_comp_ratings)
tourney_comp_ratings = file_utils.merge_tourney_ranking_data(tourney_data, computer_rankings)
tourney_data = file_utils.merge_tourney_summary_data(tourney_data, summary_data)
tourney_comp_ratings = utils.implement_seed_threshold_feature(tourney_comp_ratings)
tourney_data = utils.recode_tourney_data(tourney_data)
game_data = utils.compute_game_data(tourney_data, teams)
tourney_comp_ratings[item] = tourney_comp_ratings[item].astype(float)
feature_data = tourney_comp_ratings[feature_columns].copy()
X= feature_data[feature_data['season_t']<= stop_tournament]
X= X.drop(columns=['season_t'])
y=tourney_comp_ratings[tourney_comp_ratings['season_t']<= stop_tournament]['game_result']
X_test = X_test.copy()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 5)
X_train = X_train.copy()
X_test[numeric_features] = scaler.transform(X_test[numeric_features])
X_train[numeric_features] = scaler.transform(X_train[numeric_features])
X_copy = X.copy()
X_copy[numeric_features] = scaler.transform(X_copy[numeric_features])
train_sizes, train_scores, test_scores = learning_curve(logreg,X_copy,y,# Number of folds in cross-validationcv=10,# Evaluation metricscoring='accuracy',# Use all computer coresn_jobs=-1,# 50 different sizes of the training settrain_sizes=np.linspace(0.01, 1.0, 50))
X_test[numeric_model_features] = scaler.transform(X_test[numeric_model_features])
X_train, X_test, y_train, y_test = train_test_split(X_model, y, test_size=0.2, random_state= 5)
X_train[numeric_model_features] = scaler.transform(X_train[numeric_model_features])
X_model = X[model_features].copy()
X_test = X_test.copy()
X_train = X_train.copy()
missed_predictions = get_missed_predictions(tourney_comp_ratings, model_features, numeric_model_features,prediction_probabilities, X_test, y_test, y_pred)
plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]
plot_missed_predictions_df = pd.melt(plot_missed_predictions_df, id_vars='game_index', var_name= 'Features Supporting Outcome')
feature_copy = feature_data[feature_data['season_t'] == test_year].copy()
feature_copy[numeric_model_features] = scaler.transform(feature_copy[numeric_model_features])
y_season = tourney_comp_ratings[tourney_comp_ratings['season_t']== test_year]['game_result']
X_season = feature_copy[model_features]
missed_predictions = get_missed_predictions(tourney_comp_ratings, model_features, numeric_model_features,prediction_probabilities,X_season,y_season,y_pred_season)
plot_missed_predictions_df = missed_predictions[['game_index','features','model_features']]
plot_missed_predictions_df = pd.melt(plot_missed_predictions_df, id_vars='game_index', var_name= 'Features Supporting Outcome')
tourney_games = tourney_comp_ratings[tourney_comp_ratings.index.isin(X_season.index)].copy()
tourney_games['predicted'] = y_pred_season
predictions_counter_seed = tourney_games[cond_1 | cond_2]
correct_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result']== predictions_counter_seed['predicted']]
wrong_counter_predictions = predictions_counter_seed[predictions_counter_seed['game_result'] != predictions_counter_seed['predicted']]