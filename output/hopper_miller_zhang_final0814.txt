Total number of lines found: 48

data['OrderedBreed'] = data.Breed.apply(reorder)
if i.find(" ") >= 0: i = i.replace(" ", "-")
breeds['Breed'] = breeds['Breed'].str.strip()
data['MixedBreed'] = data.Breed.apply(mixed_breed)
if i.find("/") >= 0: i = i.replace("/", " ")
data['AgeuponOutcome'].fillna('', inplace = True)
data['Intact'] = data.SexuponOutcome.apply(intact)
data['Named'] = data.Name.apply(naming)
data['TopBreed'] = data.Breed.apply(top_breed)
ranks.append(int(breeds.loc[breeds['Breed'] == word]['2007']))
data['PitBull'] = data.Breed.apply(pit_bull)
data['ConvertedAge']=data['AgeuponOutcome'].apply(ageConvert)
data['Female'] = data.SexuponOutcome.apply(female)
data['BreedRank'] = data.Breed.apply(breed_rank)
if pd.isnull(i): return 'Unnamed'
data['OrderedColor'] = data.Color.apply(reorder)
data['BlackCat'] = data.Color.apply(black_cat)
return np.mean(ranks)
data['OutcomeSubtype'] = data['OutcomeSubtype'].fillna('')
data['Female'] = 'Female' in data['SexuponOutcome']
data2 = pd.concat([data[target], data[continuous], pd.get_dummies(data[discrete])], axis=1)
y = data2[[target]]
data["ConvertedAge"] = data.groupby("AnimalType").transform(lambda x: x.fillna(x.median()))
data[continuous].describe().T
X = data2[predictors]
animal_type = data['AnimalType'].value_counts()
outcome_type = data['OutcomeType'].value_counts()
print("Unique Breeds" , (data.OrderedBreed.value_counts() > 0).sum())
OrderedBreed = data.OrderedBreed.unique()
plt.xticks(range(len(corr.columns)), corr.columns,rotation='vertical');
plt.yticks(range(len(corr.columns)), corr.columns);
data_cat = data[data['AnimalType'] == 'Cat']
y_dog = data_dog[[target]]
y_cat = data_cat[[target]]
data_dog = data[data['AnimalType'] == 'Dog']
X_dog = data_dog[pred['dog']]
X_cat = data_cat[pred['cat']]
data = X[self.cols]
cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
thresh = cm.max() / 2.
X_train_feature = X_train_feature.drop('Intact_Unknown', 1)
X_train_feature = X_train_feature.drop('Female_Unknown', 1)
X_dev_feature = X_dev_feature.drop('Intact_Unknown', 1)
X_dev_feature = X_dev_feature.drop('Female_Unknown', 1)
X_train_dog = X_train_feature.drop('AnimalType_Dog', 1)
X_dev_dog = X_dev_feature.drop('AnimalType_Dog', 1)
X_train_cat = X_train_feature.drop('AnimalType_Cat', 1)
X_dev_cat = X_dev_feature.drop('AnimalType_Cat', 1)

Incorrect Lines:

if i.find(" ") >= 0: i = i.replace(" ", "-")
if i.find("/") >= 0: i = i.replace("/", " ")
ranks.append(int(breeds.loc[breeds['Breed'] == word]['2007']))
if pd.isnull(i): return 'Unnamed'
return np.mean(ranks)
y = data2[[target]]
X = data2[predictors]
OrderedBreed = data.OrderedBreed.unique()
plt.xticks(range(len(corr.columns)), corr.columns,rotation='vertical');
plt.yticks(range(len(corr.columns)), corr.columns);
data = X[self.cols]
thresh = cm.max() / 2.

Precision = 0.75
Recall = 0.8

ss.fit(X_train[continuous])   # Compute mean and std of training data
X_train[continuous] = ss.transform(X_train[continuous])  # Use that mean and std to normalize columns of training data
X_dev[continuous] = ss.transform(X_dev[continuous])
X_train_feature = X_train
X_dev_feature = X_dev
X_train_dog = X_train_feature
X_dev_dog = X_dev_feature
X_train_cat = X_train_feature
X_dev_cat = X_dev_feature
